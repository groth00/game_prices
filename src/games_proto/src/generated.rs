// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct NoResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct NotImplemented {}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAppBootstrapData {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub hidden: ::core::option::Option<bool>,
    #[prost(string, repeated, tag = "3")]
    pub user_tag: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAppOverview {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub visible_in_game_list: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub subscribed_to: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub sort_as: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub app_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "13")]
    pub mru_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14", default = "0")]
    pub rt_recent_activity_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16", default = "0")]
    pub minutes_playtime_forever: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17", default = "0")]
    pub minutes_playtime_last_two_weeks: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18", default = "0")]
    pub rt_last_time_played: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "19")]
    pub store_tag: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "20")]
    pub association: ::prost::alloc::vec::Vec<CAppOverviewAppAssociation>,
    #[prost(uint32, repeated, packed = "false", tag = "23")]
    pub store_category: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "25", default = "0")]
    pub rt_original_release_date: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "26", default = "0")]
    pub rt_steam_release_date: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "27")]
    pub icon_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "30")]
    pub logo_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "31")]
    pub controller_support: ::core::option::Option<i32>,
    /// optional int32 xbox_controller_support = 31 \[(.description) = "enum"\];
    #[prost(bool, optional, tag = "32")]
    pub vr_supported: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "36")]
    pub metacritic_score: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "37")]
    pub size_on_disk: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "38")]
    pub third_party_mod: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "39")]
    pub icon_data: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub icon_data_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "41")]
    pub gameid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "42")]
    pub library_capsule_filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "43")]
    pub per_client_data: ::prost::alloc::vec::Vec<CAppOverviewPerClientData>,
    #[prost(uint64, optional, tag = "44", default = "0")]
    pub most_available_clientid: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "45", default = "0")]
    pub selected_clientid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "46")]
    pub rt_store_asset_mtime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "47")]
    pub rt_custom_image_mtime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "48")]
    pub optional_parent_app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "49")]
    pub owner_account_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "50")]
    pub compat_mapping_enabled: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "51")]
    pub compat_mapping_priority: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "52")]
    pub compat_mapping_tool_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "53", default = "0")]
    pub review_score_with_bombs: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "54", default = "0")]
    pub review_percentage_with_bombs: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "55", default = "0")]
    pub review_score_without_bombs: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "56", default = "0")]
    pub review_percentage_without_bombs: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "57")]
    pub library_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "58")]
    pub vr_only: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "59")]
    pub mastersub_appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "60")]
    pub mastersub_includedwith_logo: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "61", default = "0")]
    pub compat_allowlist_setting: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "62")]
    pub site_license_site_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "63")]
    pub shortcut_override_appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "65")]
    pub rt_last_time_locally_played: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "66")]
    pub rt_purchased_time: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "67")]
    pub header_filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "68")]
    pub local_cache_version: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "72", default = "1")]
    pub number_of_copies: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "73", default = "0")]
    pub steam_hw_compat_category_packed: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "74")]
    pub album_cover_hash: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAppOverviewAppAssociation {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAppOverviewChange {
    #[prost(message, repeated, tag = "1")]
    pub app_overview: ::prost::alloc::vec::Vec<CAppOverview>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub removed_appid: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "3")]
    pub full_update: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub update_complete: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAppOverviewPerClientData {
    #[prost(uint64, optional, tag = "1", default = "0")]
    pub clientid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub client_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub display_status: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "4")]
    pub status_percentage: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub active_beta: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub installed: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "7", default = "0")]
    pub bytes_downloaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8", default = "0")]
    pub bytes_total: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "9")]
    pub streaming_to_local_client: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_available_on_current_platform: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub is_invalid_os_type: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "12")]
    pub playtime_left: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "14")]
    pub update_available_but_disabled_by_app: ::core::option::Option<bool>,
}
/// Used by: AccountCart, Checkout
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CartAmount {
    #[prost(int64, optional, tag = "1")]
    pub amount_in_cents: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "2")]
    pub currency_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub formatted_amount: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: AccountCart, Checkout
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CartCoupon {
    #[prost(uint32, optional, tag = "1")]
    pub couponid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub gidcoupon: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "5")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub coupon_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub large_icon_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub discount_pct: ::core::option::Option<i32>,
}
/// Used by: AccountCart, Checkout
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CartGiftInfo {
    #[prost(int32, optional, tag = "1")]
    pub accountid_giftee: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub gift_message: ::core::option::Option<CartGiftMessage>,
    #[prost(int32, optional, tag = "3")]
    pub time_scheduled_send: ::core::option::Option<i32>,
}
/// Used by: AccountCart, Checkout
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CartGiftMessage {
    #[prost(string, optional, tag = "1")]
    pub gifteename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub sentiment: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub signature: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CBillingAddress {
    #[prost(string, optional, tag = "1")]
    pub first_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub last_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub address1: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub address2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub city: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub us_state: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub postcode: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub zip_plus4: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub phone: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: ChatRoom, ChatRoomClient, ClanChatRooms
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CChatPartyBeacon {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamid_owner: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub beacon_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub game_metadata: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: ChatRoom, ChatRoomClient, ClanChatRooms
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CChatRoleActions {
    #[prost(uint64, optional, tag = "1")]
    pub role_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub can_create_rename_delete_channel: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub can_kick: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub can_ban: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub can_invite: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub can_change_tagline_avatar_name: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub can_chat: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub can_view_history: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub can_change_group_roles: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub can_change_user_roles: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub can_mention_all: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub can_set_watching_broadcast: ::core::option::Option<bool>,
}
/// Used by: ChatRoom, ChatRoomClient, ClanChatRooms
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CChatRoomGetChatRoomGroupSummaryResponse {
    #[prost(uint64, optional, tag = "1")]
    pub chat_group_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub chat_group_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub active_member_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub active_voice_member_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "5")]
    pub default_chat_id: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "6")]
    pub chat_rooms: ::prost::alloc::vec::Vec<CChatRoomState>,
    #[prost(uint32, optional, tag = "7")]
    pub clanid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub chat_group_tagline: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub accountid_owner: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "10")]
    pub top_members: ::prost::alloc::vec::Vec<u32>,
    #[prost(bytes = "vec", optional, tag = "11")]
    pub chat_group_avatar_sha: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "12")]
    pub rank: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "13")]
    pub default_role_id: ::core::option::Option<u64>,
    #[prost(uint64, repeated, packed = "false", tag = "14")]
    pub role_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(message, repeated, tag = "15")]
    pub role_actions: ::prost::alloc::vec::Vec<CChatRoleActions>,
    #[prost(uint32, optional, tag = "16")]
    pub watching_broadcast_accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "18")]
    pub party_beacons: ::prost::alloc::vec::Vec<CChatPartyBeacon>,
    #[prost(uint64, optional, tag = "19")]
    pub watching_broadcast_channel_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub active_minigame_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "21")]
    pub avatar_ugc_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "22")]
    pub disabled: ::core::option::Option<bool>,
}
/// Used by: ChatRoom, ChatRoomClient, ClanChatRooms
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CChatRoomState {
    #[prost(uint64, optional, tag = "1")]
    pub chat_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub chat_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub voice_allowed: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub members_in_voice: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub time_last_message: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub sort_order: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub last_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub accountid_last_message: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClanEventData {
    #[prost(fixed64, optional, tag = "1")]
    pub gid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub clan_steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub event_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub event_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub server_address: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub server_password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub rtime32_start_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub rtime32_end_time: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "10")]
    pub comment_count: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "11")]
    pub creator_steamid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "12")]
    pub last_update_steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "13")]
    pub event_notes: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub jsondata: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "15")]
    pub announcement_body: ::core::option::Option<CCommunityClanAnnouncementInfo>,
    #[prost(bool, optional, tag = "16")]
    pub published: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17")]
    pub hidden: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "18")]
    pub rtime32_visibility_start: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19")]
    pub rtime32_visibility_end: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "20")]
    pub broadcaster_accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "21")]
    pub follower_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "22")]
    pub ignore_count: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "23")]
    pub forum_topic_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "24")]
    pub rtime32_last_modified: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "25")]
    pub news_post_gid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "26")]
    pub rtime_mod_reviewed: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "27")]
    pub featured_app_tagid: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "28")]
    pub referenced_appids: ::prost::alloc::vec::Vec<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsAppInterfaceCreation {
    #[prost(string, optional, tag = "1")]
    pub raw_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub requested_interface_type: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsAppInterfaceMethodCounts {
    #[prost(string, optional, tag = "1")]
    pub interface_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub call_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsAppInterfaceStatsNotification {
    #[prost(uint64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "2")]
    pub interfaces_created: ::prost::alloc::vec::Vec<CClientMetricsAppInterfaceCreation>,
    #[prost(message, repeated, tag = "3")]
    pub methods_called: ::prost::alloc::vec::Vec<CClientMetricsAppInterfaceMethodCounts>,
    #[prost(uint32, optional, tag = "4")]
    pub session_length_seconds: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsClientBootstrapNotification {
    #[prost(message, optional, tag = "1")]
    pub summary: ::core::option::Option<CClientMetricsClientBootstrapSummary>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsClientBootstrapRequestInfo {
    #[prost(string, optional, tag = "1")]
    pub original_hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub actual_hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub base_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub success: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub status_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub address_of_request_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub response_time_ms: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "9")]
    pub bytes_received: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "10")]
    pub num_retries: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsClientBootstrapSummary {
    #[prost(uint32, optional, tag = "1")]
    pub launcher_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub steam_realm: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub beta_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub download_completed: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub total_time_ms: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "7")]
    pub manifest_requests: ::prost::alloc::vec::Vec<CClientMetricsClientBootstrapRequestInfo>,
    #[prost(message, repeated, tag = "8")]
    pub package_requests: ::prost::alloc::vec::Vec<CClientMetricsClientBootstrapRequestInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsClipRangeNotification {
    #[prost(int32, optional, tag = "1")]
    pub original_range_method: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub start: ::core::option::Option<CClientMetricsClipRangeNotificationRelativeRangeEdge>,
    #[prost(message, optional, tag = "3")]
    pub end: ::core::option::Option<CClientMetricsClipRangeNotificationRelativeRangeEdge>,
    #[prost(float, optional, tag = "4")]
    pub seconds: ::core::option::Option<f32>,
    #[prost(fixed64, optional, tag = "5")]
    pub gameid: ::core::option::Option<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsClipRangeNotificationRelativeRangeEdge {
    #[prost(int32, optional, tag = "1")]
    pub original_range_method: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub latest_range_method: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub delta_ms: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsClipShareNotification {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub share_method: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "3")]
    pub seconds: ::core::option::Option<f32>,
    #[prost(uint64, optional, tag = "4")]
    pub bytes: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "5")]
    pub gameid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsCloudAppSyncStatsNotification {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub platform_type: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub preload: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub blocking_app_launch: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5")]
    pub files_uploaded: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub files_downloaded: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub files_deleted: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "8")]
    pub bytes_uploaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub bytes_downloaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub microsec_total: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub microsec_init_caches: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub microsec_validate_state: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub microsec_ac_launch: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub microsec_ac_prep_user_files: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub microsec_ac_exit: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub microsec_build_sync_list: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub microsec_delete_files: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub microsec_download_files: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "19")]
    pub microsec_upload_files: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "20")]
    pub hardware_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "21")]
    pub files_managed: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsContentDownloadResponseCounts {
    #[prost(uint32, optional, tag = "1")]
    pub class_100: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub class_200: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub class_300: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub class_400: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub class_500: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub no_response: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub class_unknown: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsContentDownloadResponseCountsNotification {
    #[prost(uint32, optional, tag = "1")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CClientMetricsContentDownloadResponseHosts>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsContentDownloadResponseHostCounts {
    #[prost(string, optional, tag = "1")]
    pub hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub source_type: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub counts: ::core::option::Option<CClientMetricsContentDownloadResponseCounts>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsContentDownloadResponseHosts {
    #[prost(message, repeated, tag = "1")]
    pub hosts: ::prost::alloc::vec::Vec<CClientMetricsContentDownloadResponseHostCounts>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsContentValidationNotification {
    #[prost(int32, optional, tag = "1")]
    pub validation_result: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub staged_files: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub user_initiated: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub early_out: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub chunks_scanned: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub chunks_corrupt: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "8")]
    pub bytes_scanned: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub chunk_bytes_corrupt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub total_file_size_corrupt: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsDownloadRatesNotification {
    #[prost(uint32, optional, tag = "1")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub stats: ::prost::alloc::vec::Vec<CClientMetricsDownloadRatesNotificationStatsInfo>,
    #[prost(uint32, optional, tag = "3")]
    pub throttling_kbps: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub os_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub device_type: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsDownloadRatesNotificationStatsInfo {
    #[prost(uint32, optional, tag = "1")]
    pub source_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub source_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub bytes: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub host_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub microseconds: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "6")]
    pub used_ipv6: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub proxied: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub used_http2: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "9")]
    pub cache_hits: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub cache_misses: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "11")]
    pub hit_bytes: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub miss_bytes: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsEndGameRecordingNotification {
    #[prost(int32, optional, tag = "1")]
    pub recording_type: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "2")]
    pub seconds: ::core::option::Option<f32>,
    #[prost(uint64, optional, tag = "3")]
    pub bytes: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "4")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "5")]
    pub instant_clip: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsGamePerformanceNotification {
    #[prost(message, repeated, tag = "1")]
    pub reports: ::prost::alloc::vec::Vec<CClientMetricsGamePerformanceNotificationFrameRateReport>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsGamePerformanceNotificationFrameRateReport {
    #[prost(fixed64, optional, tag = "1")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub frame_rate: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub manufacturer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub model: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub dx_video_card: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub dx_vendorid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub dx_deviceid: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "8")]
    pub num_gpu: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "9")]
    pub system_ram: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "10")]
    pub session_seconds: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsIPv6ConnectivityNotification {
    #[prost(uint32, optional, tag = "1")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<CClientMetricsIPv6ConnectivityResult>,
    #[prost(bool, optional, tag = "3")]
    pub private_ip_is_rfc6598: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsIPv6ConnectivityResult {
    #[prost(uint32, optional, tag = "1")]
    pub protocol_tested: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub connectivity_state: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientMetricsSteamPipeWorkStatsNotification {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub depotid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub work_type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub operations: ::prost::alloc::vec::Vec<CClientMetricsSteamPipeWorkStatsOperation>,
    #[prost(uint32, optional, tag = "5")]
    pub hardware_type: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientMetricsSteamPipeWorkStatsOperation {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub num_ops: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub num_bytes: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub busy_time_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub idle_time_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub sum_run_time_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub sum_wait_time_ms: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationAchievement {
    #[prost(string, optional, tag = "1")]
    pub achievement_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub image_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub achieved: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub rtime_unlocked: ::core::option::Option<u32>,
    #[prost(float, optional, tag = "8")]
    pub min_progress: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "9")]
    pub current_progress: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "10")]
    pub max_progress: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "11")]
    pub global_achieved_pct: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationBatteryTemperature {
    #[prost(uint32, optional, tag = "1")]
    pub temperature: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub notification_type: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationBroadcastAvailableToWatch {
    #[prost(int32, optional, tag = "1")]
    pub broadcast_permission: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationCannotReadControllerGuideButton {
    #[prost(int32, optional, tag = "1")]
    pub controller_index: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationClaimSteamDeckRewards {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationCloudSyncConflict {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationCloudSyncFailure {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationDockUnsupportedFirmware {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationDownloadCompleted {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub dlc_appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationFamilySharingStopPlaying {
    #[prost(uint32, optional, tag = "1")]
    pub accountid_owner: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub seconds_remaining: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationFriendInGame {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationFriendInviteRollup {
    #[prost(uint32, optional, tag = "1")]
    pub new_invite_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationFriendMessage {
    #[prost(string, optional, tag = "1")]
    pub tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub steamid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub body: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub notificationid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub response_steamurl: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationFriendOnline {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationGameRecordingError {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub error_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationGameRecordingInstantClip {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub clip_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "3")]
    pub duration_secs: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationGameRecordingStart {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationGameRecordingStop {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub clip_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "3")]
    pub duration_secs: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationGameRecordingUserMarkerAdded {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationGroupChatMessage {
    #[prost(string, optional, tag = "1")]
    pub tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub steamid_sender: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub chat_group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub chat_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub body: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub rawbody: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub notificationid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationHardwareSurveyPending {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationIncomingVoiceChat {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationItemAnnouncement {
    #[prost(uint32, optional, tag = "1")]
    pub new_item_count: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub new_backpack_items: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationLoginRefresh {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationLowBattery {
    #[prost(float, optional, tag = "1")]
    pub pct_remaining: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationLowDiskSpace {
    #[prost(uint32, optional, tag = "1")]
    pub folder_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationOverlaySplashScreen {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationPlaytimeWarning {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub playtime_remaining: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationRemoteClientConnection {
    #[prost(string, optional, tag = "1")]
    pub machine: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub connected: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationRemoteClientStartStream {
    #[prost(string, optional, tag = "1")]
    pub machine: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationScreenshot {
    #[prost(string, optional, tag = "1")]
    pub screenshot_handle: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub local_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationSteamInputActionSetChanged {
    #[prost(int32, optional, tag = "1")]
    pub controller_index: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub action_set_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationStreamingClientConnection {
    #[prost(string, optional, tag = "1")]
    pub hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub machine: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub connected: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationSystemUpdate {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CClientNotificationTimedTrialRemaining {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub offline: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "4")]
    pub allowed_seconds: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub played_seconds: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CClientNotificationTimerExpired {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CCloudAppExitSyncDoneNotification {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub client_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub uploads_completed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub uploads_required: ::core::option::Option<bool>,
}
/// Used by: Cloud, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CCloudPendingRemoteOperation {
    #[prost(int32, optional, tag = "1")]
    pub operation: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub machine_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub client_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub time_last_updated: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "5")]
    pub os_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub device_type: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CCommunityClanAnnouncementInfo {
    #[prost(uint64, optional, tag = "1")]
    pub gid: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub clanid: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub posterid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub headline: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub posttime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub updatetime: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub body: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub commentcount: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "9")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "10")]
    pub language: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11")]
    pub hidden: ::core::option::Option<bool>,
    #[prost(fixed64, optional, tag = "12")]
    pub forum_topic_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "13")]
    pub event_gid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "14")]
    pub voteupcount: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub votedowncount: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CCuratorPreferences {
    #[prost(uint32, optional, tag = "1")]
    pub supported_languages: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub platform_windows: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub platform_mac: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub platform_linux: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub vr_content: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub adult_content_violence: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub adult_content_sex: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "8")]
    pub timestamp_updated: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "9")]
    pub tagids_curated: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "10")]
    pub tagids_filtered: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "11")]
    pub website_title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub website_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub discussion_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "14")]
    pub show_broadcast: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CGameNetworkingUiAppSummary {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "10")]
    pub ip_was_shared_with_friend: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub ip_was_shared_with_nonfriend: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "20")]
    pub active_connections: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "30")]
    pub main_cxn: ::core::option::Option<CGameNetworkingUiConnectionSummary>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CGameNetworkingUiConnectionState {
    #[prost(string, optional, tag = "1")]
    pub connection_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "3")]
    pub connection_id_local: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub identity_local: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub identity_remote: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "10")]
    pub connection_state: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub start_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub close_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub close_reason: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub close_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub status_loc_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "20")]
    pub transport_kind: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "21")]
    pub sdrpopid_local: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub sdrpopid_remote: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub address_remote: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "24")]
    pub p2p_routing: ::core::option::Option<CMsgSteamDatagramP2pRoutingSummary>,
    #[prost(uint32, optional, tag = "25")]
    pub ping_interior: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "26")]
    pub ping_remote_front: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "27")]
    pub ping_default_internet_route: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "30")]
    pub e2e_quality_local: ::core::option::Option<CMsgSteamDatagramConnectionQuality>,
    #[prost(message, optional, tag = "31")]
    pub e2e_quality_remote: ::core::option::Option<CMsgSteamDatagramConnectionQuality>,
    #[prost(uint64, optional, tag = "32")]
    pub e2e_quality_remote_instantaneous_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub e2e_quality_remote_lifetime_time: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "40")]
    pub front_quality_local: ::core::option::Option<CMsgSteamDatagramConnectionQuality>,
    #[prost(message, optional, tag = "41")]
    pub front_quality_remote: ::core::option::Option<CMsgSteamDatagramConnectionQuality>,
    #[prost(uint64, optional, tag = "42")]
    pub front_quality_remote_instantaneous_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "43")]
    pub front_quality_remote_lifetime_time: ::core::option::Option<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CGameNetworkingUiConnectionSummary {
    #[prost(uint32, optional, tag = "1")]
    pub transport_kind: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub sdrpop_local: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub sdrpop_remote: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub ping_ms: ::core::option::Option<u32>,
    #[prost(float, optional, tag = "5")]
    pub packet_loss: ::core::option::Option<f32>,
    #[prost(uint32, optional, tag = "6")]
    pub ping_default_internet_route: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "7")]
    pub ip_was_shared: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "8")]
    pub connection_state: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CGameRecordingAudioSessionsChangedNotification {
    #[prost(message, repeated, tag = "1")]
    pub sessions: ::prost::alloc::vec::Vec<CGameRecordingAudioSessionsChangedNotificationSession>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CGameRecordingAudioSessionsChangedNotificationSession {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub is_system: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_muted: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_active: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_captured: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "7")]
    pub recent_peak: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "8")]
    pub is_game: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_steam: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_saved: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CLibraryBootstrapData {
    #[prost(message, repeated, tag = "1")]
    pub app_data: ::prost::alloc::vec::Vec<CAppBootstrapData>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CLocalizationToken {
    #[prost(uint32, optional, tag = "1")]
    pub language: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub localized_string: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgAchievementChange {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgAmUnlockHevc {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgAmUnlockHevcResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgAmUnlockStreaming {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgAmUnlockStreamingResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub encryption_key: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgAppRights {
    #[prost(bool, optional, tag = "1")]
    pub edit_info: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub publish: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub view_error_data: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub download: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub upload_cdkeys: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub generate_cdkeys: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub view_financials: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub manage_ceg: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub manage_signing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub manage_cdkeys: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub edit_marketing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub economy_support: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub economy_support_supervisor: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub manage_pricing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub broadcast_live: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub view_marketing_traffic: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgAuthTicket {
    #[prost(uint32, optional, tag = "1")]
    pub estate: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "3")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "4")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "5")]
    pub h_steam_pipe: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub ticket_crc: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub server_secret: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "9")]
    pub ticket_type: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgBadgeCraftedNotification {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub badge_level: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAccountInfo {
    #[prost(string, optional, tag = "1")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub ip_country: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub count_authed_computers: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "7")]
    pub account_flags: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "8")]
    pub facebook_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "9")]
    pub facebook_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "14")]
    pub steamguard_notify_newmachines: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "15")]
    pub steamguard_machine_name_user_chosen: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "16")]
    pub is_phone_verified: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "17")]
    pub two_factor_state: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "18")]
    pub is_phone_identifying: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "19")]
    pub is_phone_needing_reverify: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientActivateOemLicense {
    #[prost(string, optional, tag = "1")]
    pub bios_manufacturer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub bios_serialnumber: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub license_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "4")]
    pub mainboard_manufacturer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub mainboard_product: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub mainboard_serialnumber: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAddFriend {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_to_add: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub accountname_or_email_to_add: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAddFriendResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_added: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub persona_name_added: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAddFriendToGroup {
    #[prost(int32, optional, tag = "1")]
    pub groupid: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamiduser: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAddFriendToGroupResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetClanOfficers {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_clan: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetClanOfficersResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamid_clan: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub officer_count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetPersonaNameHistory {
    #[prost(int32, optional, tag = "1")]
    pub id_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<CMsgClientAmGetPersonaNameHistoryIdInstance>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetPersonaNameHistoryIdInstance {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetPersonaNameHistoryResponse {
    #[prost(message, repeated, tag = "2")]
    pub responses:
        ::prost::alloc::vec::Vec<CMsgClientAmGetPersonaNameHistoryResponseNameTableInstance>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetPersonaNameHistoryResponseNameTableInstance {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "3")]
    pub names: ::prost::alloc::vec::Vec<
        CMsgClientAmGetPersonaNameHistoryResponseNameTableInstanceNameInstance,
    >,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAmGetPersonaNameHistoryResponseNameTableInstanceNameInstance {
    #[prost(fixed32, optional, tag = "1")]
    pub name_since: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoChanges {
    #[prost(uint32, optional, tag = "1")]
    pub current_change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub force_full_update: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub app_i_ds: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoRequest {
    #[prost(message, repeated, tag = "1")]
    pub apps: ::prost::alloc::vec::Vec<CMsgClientAppInfoRequestApp>,
    #[prost(bool, optional, tag = "2", default = "false")]
    pub supports_batches: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoRequestApp {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub section_flags: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub section_crc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoResponse {
    #[prost(message, repeated, tag = "1")]
    pub apps: ::prost::alloc::vec::Vec<CMsgClientAppInfoResponseApp>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub apps_unknown: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub apps_pending: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoResponseApp {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "3")]
    pub sections: ::prost::alloc::vec::Vec<CMsgClientAppInfoResponseAppSection>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoResponseAppSection {
    #[prost(uint32, optional, tag = "1")]
    pub section_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub section_kv: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAppInfoUpdate {
    #[prost(uint32, optional, tag = "1")]
    pub last_changenumber: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub send_changelist: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAuthList {
    #[prost(uint32, optional, tag = "1")]
    pub tokens_left: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub last_request_seq: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub last_request_seq_from_server: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "4")]
    pub tickets: ::prost::alloc::vec::Vec<CMsgAuthTicket>,
    #[prost(uint32, repeated, packed = "false", tag = "5")]
    pub app_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub message_sequence: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAuthListAck {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub ticket_crc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub app_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub message_sequence: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAuthorizeLocalDevice {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub owner_account_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub authed_device_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientAuthorizeLocalDeviceNotification {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub owner_account_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub local_device_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientAuthorizeLocalDeviceRequest {
    #[prost(string, optional, tag = "1")]
    pub device_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub owner_account_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub local_device_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientChallengeRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientChallengeResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub challenge: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientChangeStatus {
    #[prost(uint32, optional, tag = "1")]
    pub persona_state: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub player_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub is_auto_generated_name: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub high_priority: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub persona_set_by_user: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6", default = "0")]
    pub persona_state_flags: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "7")]
    pub need_persona_response: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_client_idle: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientChatGetFriendMessageHistory {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientChatGetFriendMessageHistoryForOfflineMessages {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientChatGetFriendMessageHistoryResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub success: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "3")]
    pub messages:
        ::prost::alloc::vec::Vec<CMsgClientChatGetFriendMessageHistoryResponseFriendMessage>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientChatGetFriendMessageHistoryResponseFriendMessage {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub timestamp: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub unread: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientChatInvite {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_invited: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_chat: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_patron: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "4")]
    pub chatroom_type: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "5")]
    pub steam_id_friend_chat: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub chat_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "7")]
    pub game_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCheckAppBetaPassword {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub betapassword: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCheckAppBetaPasswordResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub betapasswords: ::prost::alloc::vec::Vec<CMsgClientCheckAppBetaPasswordResponseBetaPassword>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCheckAppBetaPasswordResponseBetaPassword {
    #[prost(string, optional, tag = "1")]
    pub betaname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub betapassword: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientCheckFileSignature {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCheckFileSignatureResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub pid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub esignatureresult: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub signatureheader: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "8")]
    pub filesize: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub getlasterror: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub evalvesignaturecheckdetail: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientClanState {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_clan: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub clan_account_flags: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub name_info: ::core::option::Option<CMsgClientClanStateNameInfo>,
    #[prost(message, optional, tag = "5")]
    pub user_counts: ::core::option::Option<CMsgClientClanStateUserCounts>,
    #[prost(message, repeated, tag = "6")]
    pub events: ::prost::alloc::vec::Vec<CMsgClientClanStateEvent>,
    #[prost(message, repeated, tag = "7")]
    pub announcements: ::prost::alloc::vec::Vec<CMsgClientClanStateEvent>,
    #[prost(bool, optional, tag = "8")]
    pub chat_room_private: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientClanStateEvent {
    #[prost(fixed64, optional, tag = "1")]
    pub gid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub event_time: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub headline: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "4")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "5")]
    pub just_posted: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientClanStateNameInfo {
    #[prost(string, optional, tag = "1")]
    pub clan_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub sha_avatar: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientClanStateUserCounts {
    #[prost(uint32, optional, tag = "1")]
    pub members: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub online: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub chatting: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub in_game: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub chat_room_members: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCmList {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub cm_addresses: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub cm_ports: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "3")]
    pub cm_websocket_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub percent_default_to_websocket: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientCommentNotifications {
    #[prost(uint32, optional, tag = "1")]
    pub count_new_comments: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub count_new_comments_owner: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub count_new_comments_subscriptions: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientConnectionStats {
    #[prost(message, optional, tag = "1")]
    pub stats_logon: ::core::option::Option<CMsgClientConnectionStatsStatsLogon>,
    #[prost(message, optional, tag = "2")]
    pub stats_vconn: ::core::option::Option<CMsgClientConnectionStatsStatsVConn>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientConnectionStatsStatsLogon {
    #[prost(int32, optional, tag = "1")]
    pub connect_attempts: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub connect_successes: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub connect_failures: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub connections_dropped: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub seconds_running: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub msec_tologonthistime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub count_bad_cms: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientConnectionStatsStatsUdp {
    #[prost(uint64, optional, tag = "1")]
    pub pkts_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub bytes_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub pkts_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub pkts_processed: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub bytes_recv: ::core::option::Option<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientConnectionStatsStatsVConn {
    #[prost(uint32, optional, tag = "1")]
    pub connections_udp: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub connections_tcp: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub stats_udp: ::core::option::Option<CMsgClientConnectionStatsStatsUdp>,
    #[prost(uint64, optional, tag = "4")]
    pub pkts_abandoned: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub conn_req_received: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub pkts_resent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub msgs_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub msgs_sent_failed: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub msgs_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub datagrams_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub datagrams_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub bad_pkts_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub unknown_conn_pkts_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub missed_pkts_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub dup_pkts_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub failed_connect_challenges: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "17")]
    pub micro_sec_avg_latency: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub micro_sec_min_latency: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19")]
    pub micro_sec_max_latency: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "20")]
    pub mem_pool_msg_in_use: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientCreateFriendsGroup {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub groupname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, repeated, packed = "false", tag = "3")]
    pub steamid_friends: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientCreateFriendsGroupResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub groupid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDeauthorizeDevice {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub deauthorization_account_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDeauthorizeDeviceRequest {
    #[prost(uint32, optional, tag = "1")]
    pub deauthorization_account_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub deauthorization_device_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDeleteFriendsGroup {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub groupid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDeleteFriendsGroupResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDeregisterWithServer {
    #[prost(uint32, optional, tag = "1")]
    pub eservertype: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientDpCheckSpecialSurvey {
    #[prost(uint32, optional, tag = "1")]
    pub survey_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientDpCheckSpecialSurveyResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub e_result: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub state: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub custom_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub include_software: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientDpContentStatsReport {
    #[prost(fixed64, optional, tag = "1")]
    pub stats_machine_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub os_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub language: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub num_install_folders: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub num_installed_games: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "7")]
    pub size_installed_games: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientDpSendSpecialSurveyResponse {
    #[prost(uint32, optional, tag = "1")]
    pub survey_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientDpSendSpecialSurveyResponseReply {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub e_result: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientEmailAddrInfo {
    #[prost(string, optional, tag = "1")]
    pub email_address: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub email_is_validated: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub email_validation_changed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub credential_change_requires_code: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub password_or_secretqa_change_requires_code: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub remind_user_about_email: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientEmoticonList {
    #[prost(message, repeated, tag = "1")]
    pub emoticons: ::prost::alloc::vec::Vec<CMsgClientEmoticonListEmoticon>,
    #[prost(message, repeated, tag = "2")]
    pub stickers: ::prost::alloc::vec::Vec<CMsgClientEmoticonListSticker>,
    #[prost(message, repeated, tag = "3")]
    pub effects: ::prost::alloc::vec::Vec<CMsgClientEmoticonListEffect>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientEmoticonListEffect {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub time_received: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub infinite_use: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5")]
    pub appid: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientEmoticonListEmoticon {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub time_last_used: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub use_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub time_received: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub appid: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientEmoticonListSticker {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub count: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub time_received: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub time_last_used: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub use_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendMsg {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub chat_entry_type: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub message: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed32, optional, tag = "4")]
    pub rtime32_server_timestamp: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub echo_to_sender: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendMsgIncoming {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_from: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub chat_entry_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub from_limited_account: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub message: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed32, optional, tag = "5")]
    pub rtime32_server_timestamp: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendProfileInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_friend: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendProfileInfoResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamid_friend: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub time_created: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub real_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub city_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub state_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub country_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub headline: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub summary: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendsGroupsList {
    #[prost(bool, optional, tag = "1")]
    pub bremoval: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub bincremental: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub friend_groups: ::prost::alloc::vec::Vec<CMsgClientFriendsGroupsListFriendGroup>,
    #[prost(message, repeated, tag = "4")]
    pub memberships: ::prost::alloc::vec::Vec<CMsgClientFriendsGroupsListFriendGroupsMembership>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendsGroupsListFriendGroup {
    #[prost(int32, optional, tag = "1")]
    pub n_group_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub str_group_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendsGroupsListFriendGroupsMembership {
    #[prost(fixed64, optional, tag = "1")]
    pub ul_steam_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub n_group_id: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFriendUserStatusPublished {
    #[prost(fixed64, optional, tag = "1")]
    pub friend_steamid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub status_text: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFsGetFriendsSteamLevels {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub accountids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientFsGetFriendsSteamLevelsResponse {
    #[prost(message, repeated, tag = "1")]
    pub friends: ::prost::alloc::vec::Vec<CMsgClientFsGetFriendsSteamLevelsResponseFriend>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientFsGetFriendsSteamLevelsResponseFriend {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub level: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGameConnectTokens {
    #[prost(uint32, optional, tag = "1", default = "10")]
    pub max_tokens_to_keep: ::core::option::Option<u32>,
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub tokens: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGamesPlayed {
    #[prost(message, repeated, tag = "1")]
    pub games_played: ::prost::alloc::vec::Vec<CMsgClientGamesPlayedGamePlayed>,
    #[prost(uint32, optional, tag = "2")]
    pub client_os_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub cloud_gaming_platform: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGamesPlayedGamePlayed {
    #[prost(uint64, optional, tag = "1")]
    pub steam_id_gs: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub deprecated_game_ip_address: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_port: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_secure: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "7")]
    pub game_extra_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub game_data_blob: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "9")]
    pub process_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub streaming_provider_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub game_flags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub owner_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "13")]
    pub vr_hmd_vendor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub vr_hmd_model: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "15", default = "0")]
    pub launch_option_type: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "16", default = "-1")]
    pub primary_controller_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "17", default = "")]
    pub primary_steam_controller_serial: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "18", default = "0")]
    pub total_steam_controller_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19", default = "0")]
    pub total_non_steam_controller_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "20", default = "0")]
    pub controller_workshop_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "21", default = "0")]
    pub launch_source: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "22")]
    pub vr_hmd_runtime: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "23")]
    pub game_ip_address: ::core::option::Option<CMsgIpAddress>,
    #[prost(uint32, optional, tag = "24", default = "0")]
    pub controller_connection_type: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetAppOwnershipTicket {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetAppOwnershipTicketResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetAuthorizedDevices {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetAuthorizedDevicesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub authorized_device:
        ::prost::alloc::vec::Vec<CMsgClientGetAuthorizedDevicesResponseAuthorizedDevice>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetAuthorizedDevicesResponseAuthorizedDevice {
    #[prost(uint64, optional, tag = "1")]
    pub auth_device_token: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub device_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub last_access_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub borrower_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_pending: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub app_played: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetCdnAuthToken {
    #[prost(uint32, optional, tag = "1")]
    pub depot_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub host_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetCdnAuthTokenResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub expiration_time: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClanActivityCounts {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub steamid_clans: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClanActivityCountsResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientAppList {
    #[prost(bool, optional, tag = "1")]
    pub media: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub tools: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub games: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub only_installed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub only_changing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub comics: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientAppListResponse {
    #[prost(message, repeated, tag = "1")]
    pub apps: ::prost::alloc::vec::Vec<CMsgClientGetClientAppListResponseApp>,
    #[prost(uint64, optional, tag = "2")]
    pub bytes_available: ::core::option::Option<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientAppListResponseApp {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub category: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub favorite: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub installed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub auto_update: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "6")]
    pub bytes_downloaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub bytes_needed: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "8")]
    pub bytes_download_rate: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "9")]
    pub dlcs: ::prost::alloc::vec::Vec<CMsgClientGetClientAppListResponseAppDlc>,
    #[prost(string, optional, tag = "10")]
    pub app_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "11")]
    pub download_paused: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "12")]
    pub num_downloading: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub num_paused: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "14")]
    pub changing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub available_on_platform: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientAppListResponseAppDlc {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub installed: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientDetails {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientDetailsResponse {
    #[prost(uint32, optional, tag = "1")]
    pub package_version: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub os: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub machine_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub ip_public: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub ip_private: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "6")]
    pub games_running: ::prost::alloc::vec::Vec<CMsgClientGetClientDetailsResponseGame>,
    #[prost(uint64, optional, tag = "7")]
    pub bytes_available: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "8")]
    pub protocol_version: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetClientDetailsResponseGame {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub time_running_sec: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetDepotDecryptionKey {
    #[prost(uint32, optional, tag = "1")]
    pub depot_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetDepotDecryptionKeyResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub depot_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub depot_encryption_key: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetEmoticonList {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetUserStats {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub crc_stats: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub schema_local_version: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "4")]
    pub steam_id_for_user: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetUserStatsResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub crc_stats: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub schema: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, repeated, tag = "5")]
    pub stats: ::prost::alloc::vec::Vec<CMsgClientGetUserStatsResponseStats>,
    #[prost(message, repeated, tag = "6")]
    pub achievement_blocks:
        ::prost::alloc::vec::Vec<CMsgClientGetUserStatsResponseAchievementBlocks>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGetUserStatsResponseAchievementBlocks {
    #[prost(uint32, optional, tag = "1")]
    pub achievement_id: ::core::option::Option<u32>,
    #[prost(fixed32, repeated, packed = "false", tag = "2")]
    pub unlock_time: ::prost::alloc::vec::Vec<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientGetUserStatsResponseStats {
    #[prost(uint32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub stat_value: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientGmsServerQuery {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub geo_location_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub region_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub filter_text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub max_servers: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientHeartBeat {
    #[prost(bool, optional, tag = "1")]
    pub send_reply: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientHideFriend {
    #[prost(fixed64, optional, tag = "1")]
    pub friendid: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub hide: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientInstallClientApp {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientInstallClientAppResponse {
    #[prost(uint32, optional, tag = "1")]
    pub result: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientInviteToGame {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_dest: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_src: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub connect_string: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub remote_play: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientIsLimitedAccount {
    #[prost(bool, optional, tag = "1")]
    pub bis_limited_account: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub bis_community_banned: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub bis_locked_account: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub bis_limited_account_allowed_to_invite_friends: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientItemAnnouncements {
    #[prost(uint32, optional, tag = "1")]
    pub count_new_items: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub unseen_items: ::prost::alloc::vec::Vec<CMsgClientItemAnnouncementsUnseenItem>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientItemAnnouncementsUnseenItem {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub context_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub asset_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub amount: ::core::option::Option<u64>,
    #[prost(fixed32, optional, tag = "5")]
    pub rtime32_gained: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub source_appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientKickPlayingSession {
    #[prost(bool, optional, tag = "1")]
    pub only_stop_game: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsFindOrCreateLb {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_sort_method: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub leaderboard_display_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub create_if_not_found: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub leaderboard_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsFindOrCreateLbResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub leaderboard_entry_count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4", default = "0")]
    pub leaderboard_sort_method: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5", default = "0")]
    pub leaderboard_display_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub leaderboard_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsGetLbEntries {
    #[prost(int32, optional, tag = "1")]
    pub app_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub range_start: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub range_end: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub leaderboard_data_request: ::core::option::Option<i32>,
    #[prost(fixed64, repeated, packed = "false", tag = "6")]
    pub steamids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsGetLbEntriesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_entry_count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub entries: ::prost::alloc::vec::Vec<CMsgClientLbsGetLbEntriesResponseEntry>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsGetLbEntriesResponseEntry {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_user: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub global_rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub score: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub details: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, optional, tag = "5")]
    pub ugc_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsSetScore {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub score: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub details: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "5")]
    pub upload_score_method: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsSetScoreResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_entry_count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub score_changed: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub global_rank_previous: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub global_rank_new: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsSetUgc {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub leaderboard_id: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "3")]
    pub ugc_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientLbsSetUgcResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLicenseList {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub licenses: ::prost::alloc::vec::Vec<CMsgClientLicenseListLicense>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLicenseListLicense {
    #[prost(uint32, optional, tag = "1")]
    pub package_id: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "2")]
    pub time_created: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "3")]
    pub time_next_process: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "4")]
    pub minute_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub minutes_used: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "6")]
    pub payment_method: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub flags: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub purchase_country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub license_type: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "10")]
    pub territory_code: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub change_number: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "12")]
    pub owner_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub initial_period: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub initial_time_unit: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub renewal_period: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub renewal_time_unit: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "17")]
    pub access_token: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "18")]
    pub master_package_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientLoggedOff {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientLogOff {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLogon {
    #[prost(uint32, optional, tag = "1")]
    pub protocol_version: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub deprecated_obfustucated_private_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub last_session_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub client_package_version: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub client_language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub client_os_type: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "8", default = "false")]
    pub should_remember_password: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "9")]
    pub wine_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "10")]
    pub deprecated_10: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "11")]
    pub obfuscated_private_ip: ::core::option::Option<CMsgIpAddress>,
    #[prost(uint32, optional, tag = "20")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "21")]
    pub qos_level: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "22")]
    pub client_supplied_steam_id: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "23")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
    #[prost(bytes = "vec", optional, tag = "30")]
    pub machine_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "31", default = "0")]
    pub launcher_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "32", default = "0")]
    pub ui_mode: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "33", default = "0")]
    pub chat_mode: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "41")]
    pub steam2_auth_ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "42")]
    pub email_address: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed32, optional, tag = "43")]
    pub rtime32_account_creation: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "50")]
    pub account_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "51")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "52")]
    pub game_server_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "60")]
    pub login_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "70", default = "false")]
    pub was_converted_deprecated_msg: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "80")]
    pub anon_user_target_account_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "81")]
    pub resolved_user_steam_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "82")]
    pub eresult_sentryfile: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "83")]
    pub sha_sentryfile: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "84")]
    pub auth_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "85")]
    pub otp_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "86")]
    pub otp_value: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "87")]
    pub otp_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "88")]
    pub steam2_ticket_request: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "90")]
    pub sony_psn_ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "91")]
    pub sony_psn_service_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "92", default = "false")]
    pub create_new_psn_linked_account_if_needed: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "93")]
    pub sony_psn_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "94")]
    pub game_server_app_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "95")]
    pub steamguard_dont_remember_computer: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "96")]
    pub machine_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "97")]
    pub machine_name_userchosen: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "98")]
    pub country_override: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "99")]
    pub is_steam_box: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "100")]
    pub client_instance_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "101")]
    pub two_factor_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "102")]
    pub supports_rate_limit_response: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "103")]
    pub web_logon_nonce: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "104")]
    pub priority_reason: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "105")]
    pub embedded_client_secret: ::core::option::Option<CMsgClientSecret>,
    #[prost(bool, optional, tag = "106")]
    pub disable_partner_autogrants: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "107")]
    pub is_steam_deck: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "108")]
    pub access_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "109")]
    pub is_chrome_os: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "110")]
    pub is_tesla: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientLogonResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub legacy_out_of_game_heartbeat_seconds: ::core::option::Option<i32>,
    /// optional int32 out_of_game_heartbeat_seconds = 2;
    #[prost(int32, optional, tag = "3")]
    pub heartbeat_seconds: ::core::option::Option<i32>,
    /// optional int32 in_game_heartbeat_seconds = 3;
    #[prost(uint32, optional, tag = "4")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "5")]
    pub rtime32_server_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub account_flags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub email_domain: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "9")]
    pub steam2_ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "10")]
    pub eresult_extended: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "11")]
    pub webapi_authenticate_user_nonce: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "12")]
    pub cell_id_ping_threshold: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "13")]
    pub deprecated_use_pics: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "14")]
    pub vanity_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "15")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
    #[prost(string, optional, tag = "16")]
    pub user_country: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "20")]
    pub client_supplied_steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "21")]
    pub ip_country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "22")]
    pub parental_settings: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "23")]
    pub parental_setting_signature: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "24")]
    pub count_loginfailures_to_migrate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "25")]
    pub count_disconnects_to_migrate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "26")]
    pub ogs_data_report_time_window: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "27")]
    pub client_instance_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "28")]
    pub force_client_update_check: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "29")]
    pub agreement_session_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "30")]
    pub token_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "31")]
    pub family_group_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientManageFriendsGroup {
    #[prost(int32, optional, tag = "1")]
    pub groupid: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub groupname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, repeated, packed = "false", tag = "3")]
    pub steamid_friends_added: ::prost::alloc::vec::Vec<u64>,
    #[prost(fixed64, repeated, packed = "false", tag = "4")]
    pub steamid_friends_removed: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientManageFriendsGroupResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsCreateLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub max_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub lobby_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub lobby_flags: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "8")]
    pub persona_name_owner: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "9")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsCreateLobbyResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyData {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyList {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub num_lobbies_requested: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "4")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "6")]
    pub filters: ::prost::alloc::vec::Vec<CMsgClientMmsGetLobbyListFilter>,
    #[prost(message, optional, tag = "7")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyListFilter {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub comparision: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub filter_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyListResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub lobbies: ::prost::alloc::vec::Vec<CMsgClientMmsGetLobbyListResponseLobby>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyListResponseLobby {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub max_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub lobby_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub lobby_flags: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "6")]
    pub num_members: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "7")]
    pub distance: ::core::option::Option<f32>,
    #[prost(int64, optional, tag = "8")]
    pub weight: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyStatus {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub claim_membership: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub claim_ownership: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsGetLobbyStatusResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub lobby_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsInviteToLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_user_invited: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsJoinLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsJoinLobbyResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub chat_room_enter_response: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub lobby_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lobby_flags: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "7")]
    pub steam_id_owner: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, repeated, tag = "9")]
    pub members: ::prost::alloc::vec::Vec<CMsgClientMmsJoinLobbyResponseMember>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsJoinLobbyResponseMember {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLeaveLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLeaveLobbyResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLobbyChatMsg {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_sender: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub lobby_message: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLobbyData {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub num_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub max_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub lobby_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lobby_flags: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "7")]
    pub steam_id_owner: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, repeated, tag = "9")]
    pub members: ::prost::alloc::vec::Vec<CMsgClientMmsLobbyDataMember>,
    #[prost(uint32, optional, tag = "10")]
    pub lobby_cellid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "11")]
    pub owner_should_accept_changes: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLobbyDataMember {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsLobbyGameServerSet {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub deprecated_game_server_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_server_port: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "5")]
    pub game_server_steam_id: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "6")]
    pub game_server_ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSendLobbyChatMsg {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_target: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub lobby_message: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyData {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_member: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "4")]
    pub max_members: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub lobby_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lobby_flags: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyDataResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyGameServer {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub deprecated_game_server_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_server_port: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "5")]
    pub game_server_steam_id: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "6")]
    pub game_server_ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyLinked {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_lobby2: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyOwner {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_new_owner: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetLobbyOwnerResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsSetRatelimitPolicyOnClient {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub enable_rate_limits: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub seconds_per_message: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub milliseconds_per_data_update: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsUserJoinedLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_user: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientMmsUserLeftLobby {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_lobby: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub steam_id_user: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub persona_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientNetworkingCertReply {
    #[prost(bytes = "vec", optional, tag = "4")]
    pub cert: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, optional, tag = "5")]
    pub ca_key_id: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub ca_signature: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientNetworkingCertRequest {
    #[prost(bytes = "vec", optional, tag = "2")]
    pub key_data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "3")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientNetworkingMobileCertReply {
    #[prost(string, optional, tag = "1")]
    pub encoded_cert: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientNetworkingMobileCertRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientNewLoginKey {
    #[prost(uint32, optional, tag = "1")]
    pub unique_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub login_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientNewLoginKeyAccepted {
    #[prost(uint32, optional, tag = "1")]
    pub unique_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientOfflineMessageNotification {
    #[prost(uint32, optional, tag = "1")]
    pub offline_messages: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub friends_with_offline_messages: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientOgsReportBug {
    #[prost(uint64, optional, tag = "1")]
    pub sessionid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub bugtext: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub screenshot: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientOgsReportString {
    #[prost(bool, optional, tag = "1")]
    pub accumulated: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "2")]
    pub sessionid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub severity: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub formatter: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub varargs: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientP2pConnectionFailInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_dest: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_src: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub ep2p_session_error: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "5")]
    pub connection_id_dest: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "7")]
    pub close_reason: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub close_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientP2pConnectionInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_dest: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub steam_id_src: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub candidate: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, optional, tag = "5")]
    pub connection_id_src: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub rendezvous: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPackageInfoRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub package_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "2")]
    pub meta_data_only: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPackageInfoResponse {
    #[prost(message, repeated, tag = "1")]
    pub packages: ::prost::alloc::vec::Vec<CMsgClientPackageInfoResponsePackage>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub packages_unknown: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub packages_pending: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPackageInfoResponsePackage {
    #[prost(uint32, optional, tag = "1")]
    pub package_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub sha: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub buffer: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPersonaState {
    #[prost(uint32, optional, tag = "1")]
    pub status_flags: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub friends: ::prost::alloc::vec::Vec<CMsgClientPersonaStateFriend>,
}
/// Used by: ChatRoom, ChatRoomClient, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPersonaStateFriend {
    #[prost(fixed64, optional, tag = "1")]
    pub friendid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub persona_state: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub game_played_app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_server_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub game_server_port: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub persona_state_flags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub online_session_instances: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "10")]
    pub persona_set_by_user: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "15")]
    pub player_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "20")]
    pub query_port: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "25")]
    pub steamid_source: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "31")]
    pub avatar_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "45")]
    pub last_logoff: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "46")]
    pub last_logon: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "47")]
    pub last_seen_online: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "50")]
    pub clan_rank: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "55")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "56")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "60")]
    pub game_data_blob: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "64")]
    pub clan_data: ::core::option::Option<CMsgClientPersonaStateFriendClanData>,
    #[prost(string, optional, tag = "65")]
    pub clan_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "71")]
    pub rich_presence: ::prost::alloc::vec::Vec<CMsgClientPersonaStateFriendKv>,
    #[prost(fixed64, optional, tag = "72")]
    pub broadcast_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "73")]
    pub game_lobby_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "74")]
    pub watching_broadcast_accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "75")]
    pub watching_broadcast_appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "76")]
    pub watching_broadcast_viewers: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "77")]
    pub watching_broadcast_title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "78")]
    pub is_community_banned: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "79")]
    pub player_name_pending_review: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "80")]
    pub avatar_pending_review: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "81")]
    pub on_steam_deck: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "82")]
    pub other_game_data: ::prost::alloc::vec::Vec<CMsgClientPersonaStateFriendOtherGameData>,
}
/// Used by: ChatRoom, ChatRoomClient, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPersonaStateFriendClanData {
    #[prost(uint32, optional, tag = "1")]
    pub ogg_app_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub chat_group_id: ::core::option::Option<u64>,
}
/// Used by: ChatRoom, ChatRoomClient, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPersonaStateFriendKv {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: ChatRoom, ChatRoomClient, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPersonaStateFriendOtherGameData {
    #[prost(uint64, optional, tag = "1")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "2")]
    pub rich_presence: ::prost::alloc::vec::Vec<CMsgClientPersonaStateFriendKv>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsAccessTokenRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub packageids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsAccessTokenResponse {
    #[prost(message, repeated, tag = "1")]
    pub package_access_tokens:
        ::prost::alloc::vec::Vec<CMsgClientPicsAccessTokenResponsePackageToken>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub package_denied_tokens: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub app_access_tokens: ::prost::alloc::vec::Vec<CMsgClientPicsAccessTokenResponseAppToken>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub app_denied_tokens: ::prost::alloc::vec::Vec<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsAccessTokenResponseAppToken {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub access_token: ::core::option::Option<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsAccessTokenResponsePackageToken {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub access_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsChangesSinceRequest {
    #[prost(uint32, optional, tag = "1")]
    pub since_change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub send_app_info_changes: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub send_package_info_changes: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "4")]
    pub num_app_info_cached: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub num_package_info_cached: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsChangesSinceResponse {
    #[prost(uint32, optional, tag = "1")]
    pub current_change_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub since_change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub force_full_update: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "4")]
    pub package_changes: ::prost::alloc::vec::Vec<CMsgClientPicsChangesSinceResponsePackageChange>,
    #[prost(message, repeated, tag = "5")]
    pub app_changes: ::prost::alloc::vec::Vec<CMsgClientPicsChangesSinceResponseAppChange>,
    #[prost(bool, optional, tag = "6")]
    pub force_full_app_update: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub force_full_package_update: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsChangesSinceResponseAppChange {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub needs_token: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsChangesSinceResponsePackageChange {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub needs_token: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoRequest {
    #[prost(message, repeated, tag = "1")]
    pub packages: ::prost::alloc::vec::Vec<CMsgClientPicsProductInfoRequestPackageInfo>,
    #[prost(message, repeated, tag = "2")]
    pub apps: ::prost::alloc::vec::Vec<CMsgClientPicsProductInfoRequestAppInfo>,
    #[prost(bool, optional, tag = "3")]
    pub meta_data_only: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "4")]
    pub num_prev_failed: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub supports_package_tokens: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoRequestAppInfo {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub access_token: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub only_public_obsolete: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoRequestPackageInfo {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub access_token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoResponse {
    #[prost(message, repeated, tag = "1")]
    pub apps: ::prost::alloc::vec::Vec<CMsgClientPicsProductInfoResponseAppInfo>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub unknown_appids: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub packages: ::prost::alloc::vec::Vec<CMsgClientPicsProductInfoResponsePackageInfo>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub unknown_packageids: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "5")]
    pub meta_data_only: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub response_pending: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub http_min_size: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub http_host: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoResponseAppInfo {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub missing_token: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub buffer: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "6")]
    pub only_public: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub size: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPicsProductInfoResponsePackageInfo {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub change_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub missing_token: ::core::option::Option<bool>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub buffer: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "6")]
    pub size: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPlayerNicknameList {
    #[prost(bool, optional, tag = "1")]
    pub removal: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub incremental: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub nicknames: ::prost::alloc::vec::Vec<CMsgClientPlayerNicknameListPlayerNickname>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPlayerNicknameListPlayerNickname {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub nickname: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientPlayingSessionState {
    #[prost(bool, optional, tag = "2")]
    pub playing_blocked: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "3")]
    pub playing_app: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPurchaseResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub purchase_result_details: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub purchase_receipt_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientPurchaseWithMachineId {
    #[prost(uint32, optional, tag = "1")]
    pub package_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub machine_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientReadMachineAuth {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub offset: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub cubtoread: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientReadMachineAuthResponse {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub filesize: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub getlasterror: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub offset: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub cubread: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub bytes_read: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "9")]
    pub filename_sentry: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRedeemGuestPass {
    #[prost(fixed64, optional, tag = "1")]
    pub guest_pass_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRedeemGuestPassResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub package_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub must_own_appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRegisterAuthTicketWithCm {
    #[prost(uint32, optional, tag = "1")]
    pub protocol_version: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag = "4")]
    pub client_instance_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRegisterKey {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRegisterOemMachine {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub oem_register_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRegisterOemMachineResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRemoveFriend {
    #[prost(fixed64, optional, tag = "1")]
    pub friendid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRemoveFriendFromGroup {
    #[prost(int32, optional, tag = "1")]
    pub groupid: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2")]
    pub steamiduser: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRemoveFriendFromGroupResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientReportOverlayDetourFailure {
    #[prost(string, repeated, tag = "1")]
    pub failure_strings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestAccountData {
    #[prost(string, optional, tag = "1")]
    pub account_or_email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub action: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestAccountDataResponse {
    #[prost(uint32, optional, tag = "1")]
    pub action: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub account_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub ct_matches: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub account_name_suggestion1: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub account_name_suggestion2: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub account_name_suggestion3: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestCommentNotifications {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestedClientStats {
    #[prost(message, repeated, tag = "1")]
    pub stats_to_send: ::prost::alloc::vec::Vec<CMsgClientRequestedClientStatsStatsToSend>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestedClientStatsStatsToSend {
    #[prost(uint32, optional, tag = "1")]
    pub client_stat: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub stat_aggregate_method: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestEncryptedAppTicket {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub userdata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestEncryptedAppTicketResponse {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub encrypted_app_ticket: ::core::option::Option<EncryptedAppTicket>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestForgottenPasswordEmail {
    #[prost(string, optional, tag = "1")]
    pub account_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub password_tried: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestForgottenPasswordEmailResponse {
    #[prost(uint32, optional, tag = "1")]
    pub e_result: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub use_secret_question: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestFreeLicense {
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestFreeLicenseResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub granted_packageids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub granted_appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestFriendData {
    #[prost(uint32, optional, tag = "1")]
    pub persona_state_requested: ::core::option::Option<u32>,
    #[prost(fixed64, repeated, packed = "false", tag = "2")]
    pub friends: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestItemAnnouncements {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestMachineAuth {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub eresult_sentryfile: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub filesize: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha_sentryfile: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(int32, optional, tag = "6")]
    pub lock_account_action: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "7")]
    pub otp_type: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub otp_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "9")]
    pub otp_sharedsecret: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "10")]
    pub otp_value: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "11")]
    pub machine_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub machine_name_userchosen: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestMachineAuthResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestOfflineMessageCount {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestWebApiAuthenticateUserNonce {
    #[prost(int32, optional, tag = "1", default = "-1")]
    pub token_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRequestWebApiAuthenticateUserNonceResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3", default = "-1")]
    pub token_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "11")]
    pub webapi_authenticate_user_nonce: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRichPresenceInfo {
    #[prost(message, repeated, tag = "1")]
    pub rich_presence: ::prost::alloc::vec::Vec<CMsgClientRichPresenceInfoRichPresence>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRichPresenceInfoRichPresence {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_user: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub rich_presence_kv: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRichPresenceRequest {
    #[prost(fixed64, repeated, packed = "false", tag = "1")]
    pub steamid_request: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientRichPresenceUpload {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub rich_presence_kv: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, repeated, packed = "false", tag = "2")]
    pub steamid_broadcast: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientScreenshotsChanged {}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientSecret {
    #[prost(uint32, optional, tag = "1")]
    pub version: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub deviceid: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "4")]
    pub nonce: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub hmac: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSentLogs {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServersAvailable {
    #[prost(message, repeated, tag = "1")]
    pub server_types_available:
        ::prost::alloc::vec::Vec<CMsgClientServersAvailableServerTypesAvailable>,
    #[prost(uint32, optional, tag = "2")]
    pub server_type_for_auth_services: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientServersAvailableServerTypesAvailable {
    #[prost(uint32, optional, tag = "1")]
    pub server: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub changed: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientServerTimestampRequest {
    #[prost(uint64, optional, tag = "1")]
    pub client_request_timestamp: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientServerTimestampResponse {
    #[prost(uint64, optional, tag = "1")]
    pub client_request_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub server_timestamp_ms: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServiceCall {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub sysid_routing: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "2")]
    pub call_handle: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub module_crc: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub module_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub function_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub cub_output_max: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub flags: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub callparameter: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "9")]
    pub ping_only: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "10")]
    pub max_outstanding_calls: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServiceCallResponse {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub sysid_routing: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "2")]
    pub call_handle: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub module_crc: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub module_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub ecallresult: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub result_content: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub os_version_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub system_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, optional, tag = "9")]
    pub load_address: ::core::option::Option<u64>,
    #[prost(bytes = "vec", optional, tag = "10")]
    pub exception_record: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "11")]
    pub portable_os_version_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "12")]
    pub portable_system_info: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "13")]
    pub was_converted: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "14")]
    pub internal_result: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub current_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub last_call_handle: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub last_call_module_crc: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "18")]
    pub last_call_sysid_routing: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "19")]
    pub last_ecallresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "20")]
    pub last_callissue_delta: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "21")]
    pub last_callcomplete_delta: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServiceMethodLegacy {
    #[prost(string, optional, tag = "1")]
    pub method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub serialized_method: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "3")]
    pub is_notification: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServiceMethodLegacyResponse {
    #[prost(string, optional, tag = "1")]
    pub method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub serialized_method_response: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientServiceModule {
    #[prost(uint32, optional, tag = "1")]
    pub module_crc: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub module_hash: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub module_content: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSessionToken {
    #[prost(uint64, optional, tag = "1")]
    pub token: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSetClientAppUpdateState {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub update: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSetClientAppUpdateStateResponse {
    #[prost(uint32, optional, tag = "1")]
    pub result: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientSetPlayerNickname {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub nickname: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSetPlayerNicknameResponse {
    #[prost(uint32, optional, tag = "1")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientSettings {
    #[prost(bool, optional, tag = "1")]
    pub no_save_personal_info: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub oobe_test_mode_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub in_client_beta: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_steam_sideloaded: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub preferred_monitor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub steam_cef_gpu_blocklist_disabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub bigpicture_windowed: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "9")]
    pub is_external_display: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "10")]
    pub steam_os_underscan_level: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "11")]
    pub steam_os_underscan_enabled: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "12")]
    pub min_scale_factor: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "13")]
    pub max_scale_factor: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "14")]
    pub auto_scale_factor: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "16")]
    pub small_mode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "19")]
    pub skip_steamvr_install_dialog: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20")]
    pub always_show_user_chooser: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21")]
    pub os_version_unsupported: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3000")]
    pub show_family_sharing_notifications: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3001")]
    pub show_copy_count_in_library: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4000")]
    pub overlay_fps_counter_corner: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4001")]
    pub overlay_fps_counter_high_contrast: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "4002")]
    pub overlay_key: ::core::option::Option<CMsgHotkey>,
    #[prost(message, optional, tag = "4003")]
    pub screenshot_key: ::core::option::Option<CMsgHotkey>,
    #[prost(bool, optional, tag = "4004")]
    pub enable_overlay: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4006")]
    pub enable_screenshot_notification: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4007")]
    pub enable_screenshot_sound: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4008")]
    pub save_uncompressed_screenshots: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4009")]
    pub screenshots_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4010")]
    pub default_ping_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4011")]
    pub server_ping_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4012")]
    pub steam_networking_share_ip: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4013")]
    pub web_browser_home: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4014")]
    pub voice_mic_device_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "4015")]
    pub voice_mic_input_gain: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4016")]
    pub voice_speaker_output_gain: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "4017")]
    pub voice_push_to_talk_setting: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "4018")]
    pub voice_push_to_talk_key: ::core::option::Option<CMsgHotkey>,
    #[prost(bool, optional, tag = "4019")]
    pub overlay_toolbar_list_view: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4020")]
    pub always_use_gamepadui_overlay: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4021")]
    pub overlay_tabs: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4022")]
    pub overlay_scale_interface: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4023")]
    pub overlay_restore_browser_tabs: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4024")]
    pub enable_avif_screenshots: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5000")]
    pub smooth_scroll_webviews: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5001")]
    pub enable_gpu_accelerated_webviews: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5003")]
    pub enable_hardware_video_decoding: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5004")]
    pub run_at_startup: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5005")]
    pub enable_dpi_scaling: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5006")]
    pub enable_marketing_messages: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5007")]
    pub start_in_big_picture_mode: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5008")]
    pub jumplist_flags: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5009")]
    pub enable_ui_sounds: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6000")]
    pub disable_all_toasts: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6001")]
    pub disable_toasts_in_game: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6002")]
    pub play_sound_on_toast: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "7000")]
    pub library_display_size: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7001")]
    pub library_whats_new_show_only_product_updates: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7002")]
    pub show_store_content_on_home: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "7003")]
    pub start_page: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7004")]
    pub library_low_bandwidth_mode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7005")]
    pub library_low_perf_mode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7006")]
    pub library_disable_community_content: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7007")]
    pub library_display_icon_in_game_list: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7008")]
    pub ready_to_play_includes_streaming: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7009")]
    pub show_steam_deck_info: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8000")]
    pub enable_shader_precache: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8001")]
    pub enable_shader_background_processing: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "8002")]
    pub shader_precached_size: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "8003")]
    pub needs_steam_service_repair: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8004")]
    pub download_peer_content: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8005")]
    pub download_rate_bits_per_s: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8006")]
    pub restrict_auto_updates: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8007")]
    pub restrict_auto_updates_start: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8008")]
    pub restrict_auto_updates_end: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8009")]
    pub download_region: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8010")]
    pub download_while_app_running: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8011")]
    pub download_throttle_while_streaming: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8012")]
    pub download_throttle_rate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8013")]
    pub default_app_update_behavior: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10000")]
    pub cloud_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10001")]
    pub show_screenshot_manager: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "11000")]
    pub music_volume: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11001")]
    pub music_pause_on_app_start: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11002")]
    pub music_pause_on_voice_chat: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11003")]
    pub music_download_high_quality: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11004")]
    pub music_playlist_notification: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "12000")]
    pub broadcast_permissions: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12001")]
    pub broadcast_output_width: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12002")]
    pub broadcast_output_height: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12003")]
    pub broadcast_bitrate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12004")]
    pub broadcast_encoding_option: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "12005")]
    pub broadcast_record_all_video: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12006")]
    pub broadcast_record_all_audio: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12007")]
    pub broadcast_record_microphone: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12008")]
    pub broadcast_show_upload_stats: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12009")]
    pub broadcast_show_live_reminder: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "12010")]
    pub broadcast_chat_corner: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "13000")]
    pub gamestream_hardware_video_encode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13001")]
    pub gamestream_enable_video_h265: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14001")]
    pub steam_input_configurator_error_msg_enable: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14002")]
    pub controller_guide_button_focus_steam: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "14003")]
    pub controller_ps_support: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14004")]
    pub controller_xbox_support: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14005")]
    pub controller_xbox_driver: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14006")]
    pub controller_switch_support: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14007")]
    pub controller_generic_support: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "14008")]
    pub controller_power_off_timeout: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14009")]
    pub turn_off_controller_on_exit: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14010")]
    pub controller_combine_nintendo_joycons: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "16000")]
    pub startup_movie_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "16001")]
    pub startup_movie_local_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "16002")]
    pub startup_movie_shuffle: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16003")]
    pub startup_movie_used_for_resume: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17001")]
    pub game_notes_enable_spellcheck: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "18000")]
    pub screenshot_items_per_row: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "18201")]
    pub g_background_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18202")]
    pub g_background_max_keep: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "18203")]
    pub g_background_time_resolution: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "18207")]
    pub g_background_mk: ::core::option::Option<CMsgHotkey>,
    #[prost(message, optional, tag = "18208")]
    pub g_background_tg: ::core::option::Option<CMsgHotkey>,
    #[prost(bool, optional, tag = "18209")]
    pub g_background_a_m: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "18210")]
    pub gamerecording_video_bitrate: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "18211")]
    pub g_background_a_s: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "18212")]
    pub g_background_mode: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18213")]
    pub g_background_audio: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18214")]
    pub g_max_fps: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "18215")]
    pub gamerecording_hotkey_ic: ::core::option::Option<CMsgHotkey>,
    #[prost(float, optional, tag = "18216")]
    pub gamerecording_ic_seconds: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "18217")]
    pub gamerecording_export_limit_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18218")]
    pub gamerecording_export_limit_size_mb: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18219")]
    pub gamerecording_export_limit_bitrate: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18220")]
    pub gamerecording_export_limit_width: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18221")]
    pub gamerecording_export_limit_height: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18222")]
    pub gamerecording_export_limit_frame_rate: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "18223")]
    pub gamerecording_export_directory: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "18224")]
    pub gamerecording_export_codec: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18225")]
    pub gamerecording_video_maxheight: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "18226")]
    pub gamerecording_force_mic_mono: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "18227")]
    pub gamerecording_automatic_gain_control: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20000")]
    pub show_timestamps_in_console: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20001")]
    pub force_oobe: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "20002")]
    pub override_browser_composer_mode: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "20003")]
    pub cef_remote_debugging_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20004")]
    pub force_deck_perf_tab: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20005")]
    pub force_fake_mandatory_update: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20006")]
    pub hdr_compat_testing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20007")]
    pub developer_mode_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20008")]
    pub show_advanced_update_channels: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "21001")]
    pub gamescope_hdr_visualization: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "21002")]
    pub gamescope_app_target_framerate: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "21003")]
    pub gamescope_enable_app_target_framerate: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21004")]
    pub gamescope_disable_framelimit: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "21005")]
    pub gamescope_display_refresh_rate: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "21006")]
    pub gamescope_use_game_refresh_rate_in_steam: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21007")]
    pub gamescope_disable_mura_correction: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21008")]
    pub gamescope_include_steamui_in_screenshots: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21009")]
    pub gamescope_allow_tearing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21010")]
    pub gamescope_composite_debug: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21011")]
    pub gamescope_force_composite: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "21012")]
    pub gamescope_game_resolution_global: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "21013")]
    pub gamescope_guide_hotkey: ::core::option::Option<CMsgHotkey>,
    #[prost(message, optional, tag = "21014")]
    pub gamescope_qam_hotkey: ::core::option::Option<CMsgHotkey>,
    #[prost(bool, optional, tag = "21015")]
    pub gamescope_hdr_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21016")]
    pub gamescope_native_external_res_in_steam: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22000")]
    pub steamos_status_led_brightness: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "22001")]
    pub steamos_tdp_limit_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22002")]
    pub steamos_tdp_limit: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "22003")]
    pub steamos_cec_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "22004")]
    pub steamos_cec_wake_on_resume: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "22005")]
    pub steamos_wifi_debug: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "22006")]
    pub steamos_wifi_force_wpa_supplicant: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22007")]
    pub steamos_magnifier_scale: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "22008")]
    pub steamos_manual_gpu_clock_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22009")]
    pub steamos_manual_gpu_clock_hz: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "23001")]
    pub setting_validation_bool: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "23002")]
    pub setting_validation_enum: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "23003")]
    pub setting_validation_int32: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "23004")]
    pub setting_validation_uint32: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "23005")]
    pub setting_validation_uint64: ::core::option::Option<u64>,
    #[prost(float, optional, tag = "23006")]
    pub setting_validation_float: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "23007")]
    pub setting_validation_string: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "23008")]
    pub setting_validation_hotkey: ::core::option::Option<CMsgHotkey>,
    #[prost(bool, optional, tag = "24000")]
    pub system_bluetooth_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "24001")]
    pub hardware_updater_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "25000")]
    pub vr_show_perf_graph_in_hmd: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "140011")]
    pub controller_enable_chord: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "140012")]
    pub controller_poll_rate: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientSharedLibraryLockStatus {
    #[prost(message, repeated, tag = "1")]
    pub locked_library: ::prost::alloc::vec::Vec<CMsgClientSharedLibraryLockStatusLockedLibrary>,
    #[prost(uint32, optional, tag = "2")]
    pub own_library_locked_by: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSharedLibraryLockStatusLockedLibrary {
    #[prost(uint32, optional, tag = "1")]
    pub owner_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub locked_by: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientSharedLibraryStopPlaying {
    #[prost(int32, optional, tag = "1")]
    pub seconds_left: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub stop_apps: ::prost::alloc::vec::Vec<CMsgClientSharedLibraryStopPlayingStopApp>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientSharedLibraryStopPlayingStopApp {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub owner_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientStat2 {
    #[prost(message, repeated, tag = "1")]
    pub stat_detail: ::prost::alloc::vec::Vec<CMsgClientStat2StatDetail>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientStat2StatDetail {
    #[prost(uint32, optional, tag = "1")]
    pub client_stat: ::core::option::Option<u32>,
    #[prost(int64, optional, tag = "2")]
    pub ll_value: ::core::option::Option<i64>,
    #[prost(uint32, optional, tag = "3")]
    pub time_of_day: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub depot_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientStatsUpdated {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub crc_stats: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "4")]
    pub updated_stats: ::prost::alloc::vec::Vec<CMsgClientStatsUpdatedUpdatedStats>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientStatsUpdatedUpdatedStats {
    #[prost(uint32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub stat_value: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStats {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub explicit_reset: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub stats_to_store: ::prost::alloc::vec::Vec<CMsgClientStoreUserStatsStatsToStore>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStatsStatsToStore {
    #[prost(uint32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub stat_value: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStats2 {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub settor_steam_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "3")]
    pub settee_steam_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub crc_stats: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub explicit_reset: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "6")]
    pub stats: ::prost::alloc::vec::Vec<CMsgClientStoreUserStats2Stats>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStats2Stats {
    #[prost(uint32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub stat_value: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStatsResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub crc_stats: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "4")]
    pub stats_failed_validation:
        ::prost::alloc::vec::Vec<CMsgClientStoreUserStatsResponseStatsFailedValidation>,
    #[prost(bool, optional, tag = "5")]
    pub stats_out_of_date: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientStoreUserStatsResponseStatsFailedValidation {
    #[prost(uint32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub reverted_stat_value: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientTicketAuthComplete {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub game_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub estate: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub eauth_session_response: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub deprecated_ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "6")]
    pub ticket_crc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub ticket_sequence: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "8")]
    pub owner_steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmAddScreenshot {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub thumbname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed32, optional, tag = "4")]
    pub rtime32_created: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub permissions: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub caption: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub shortcut_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "10")]
    pub tag: ::prost::alloc::vec::Vec<CMsgClientUcmAddScreenshotTag>,
    #[prost(fixed64, repeated, packed = "false", tag = "11")]
    pub tagged_steamid: ::prost::alloc::vec::Vec<u64>,
    #[prost(bool, optional, tag = "12")]
    pub spoiler_tag: ::core::option::Option<bool>,
    #[prost(uint64, repeated, packed = "false", tag = "13")]
    pub tagged_publishedfileid: ::prost::alloc::vec::Vec<u64>,
    #[prost(string, optional, tag = "14")]
    pub vr_filename: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmAddScreenshotTag {
    #[prost(string, optional, tag = "1")]
    pub tag_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub tag_value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmAddScreenshotResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2", default = "18446744073709551615")]
    pub screenshotid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmDeletePublishedFile {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmDeletePublishedFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmDeleteScreenshot {
    #[prost(fixed64, optional, tag = "1", default = "18446744073709551615")]
    pub screenshotid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmDeleteScreenshotResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumeratePublishedFilesByUserAction {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub start_index: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub action: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumeratePublishedFilesByUserActionResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub published_files: ::prost::alloc::vec::Vec<
        CMsgClientUcmEnumeratePublishedFilesByUserActionResponsePublishedFileId,
    >,
    #[prost(uint32, optional, tag = "3")]
    pub total_results: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumeratePublishedFilesByUserActionResponsePublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(fixed32, optional, tag = "2", default = "0")]
    pub rtime_time_stamp: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserPublishedFiles {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub start_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub sort_order: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserPublishedFilesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub published_files:
        ::prost::alloc::vec::Vec<CMsgClientUcmEnumerateUserPublishedFilesResponsePublishedFileId>,
    #[prost(uint32, optional, tag = "3")]
    pub total_results: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserPublishedFilesResponsePublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFiles {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub start_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3", default = "1")]
    pub list_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4", default = "0")]
    pub matching_file_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5", default = "50")]
    pub count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFilesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub subscribed_files:
        ::prost::alloc::vec::Vec<CMsgClientUcmEnumerateUserSubscribedFilesResponsePublishedFileId>,
    #[prost(uint32, optional, tag = "3")]
    pub total_results: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFilesResponsePublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(fixed32, optional, tag = "2", default = "0")]
    pub rtime32_subscribed: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFilesWithUpdates {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub start_index: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "3")]
    pub start_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4", default = "0")]
    pub desired_revision: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFilesWithUpdatesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub subscribed_files: ::prost::alloc::vec::Vec<
        CMsgClientUcmEnumerateUserSubscribedFilesWithUpdatesResponsePublishedFileId,
    >,
    #[prost(uint32, optional, tag = "3")]
    pub total_results: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmEnumerateUserSubscribedFilesWithUpdatesResponsePublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(fixed32, optional, tag = "2", default = "0")]
    pub rtime32_subscribed: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub appid: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "4")]
    pub file_hcontent: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "5")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "6")]
    pub rtime32_last_updated: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "7")]
    pub is_depot_content: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmGetPublishedFilesForUser {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub creator_steam_id: ::core::option::Option<u64>,
    #[prost(string, repeated, tag = "3")]
    pub required_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub excluded_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub start_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmGetPublishedFilesForUserResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub published_files:
        ::prost::alloc::vec::Vec<CMsgClientUcmGetPublishedFilesForUserResponsePublishedFileId>,
    #[prost(uint32, optional, tag = "3")]
    pub total_results: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmGetPublishedFilesForUserResponsePublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmPublishedFileUpdated {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub time_updated: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "4")]
    pub hcontent: ::core::option::Option<u64>,
    #[prost(fixed32, optional, tag = "5")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub is_depot_content: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub revision: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmPublishFile {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub preview_file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub consumer_app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "9")]
    pub workshop_file: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub visibility: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "11")]
    pub file_type: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "12")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "13")]
    pub video_provider: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "14")]
    pub video_account_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub video_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "16")]
    pub in_progress: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmPublishFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2", default = "18446744073709551615")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3", default = "false")]
    pub needs_workshop_legal_agreement_acceptance: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmSetUserPublishedFileAction {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub action: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmSetUserPublishedFileActionResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmUpdatePublishedFile {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "2")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub preview_file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub visibility: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub update_file: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub update_preview_file: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub update_title: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub update_description: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub update_tags: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub update_visibility: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "15")]
    pub change_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "16")]
    pub update_url: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "17")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "18")]
    pub update_content_manifest: ::core::option::Option<bool>,
    #[prost(fixed64, optional, tag = "19")]
    pub content_manifest: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "20")]
    pub metadata: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "21")]
    pub update_metadata: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22", default = "0")]
    pub language: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "23")]
    pub removed_kvtags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "24")]
    pub kvtags: ::prost::alloc::vec::Vec<CMsgClientUcmUpdatePublishedFileKeyValueTag>,
    #[prost(message, repeated, tag = "25")]
    pub previews: ::prost::alloc::vec::Vec<CMsgClientUcmUpdatePublishedFileAdditionalPreview>,
    #[prost(int32, repeated, packed = "false", tag = "26")]
    pub previews_to_remove: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "27")]
    pub clear_in_progress: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "28")]
    pub remove_all_kvtags: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmUpdatePublishedFileAdditionalPreview {
    #[prost(string, optional, tag = "1")]
    pub original_file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub internal_file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub videoid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub preview_type: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "5", default = "-1")]
    pub update_index: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmUpdatePublishedFileKeyValueTag {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUcmUpdatePublishedFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2", default = "false")]
    pub needs_workshop_legal_agreement_acceptance: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUdsp2pSessionEnded {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_remote: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub appid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub session_length_sec: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub session_error: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub nattype: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub bytes_recv: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub bytes_sent: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub bytes_sent_relay: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub bytes_recv_relay: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub time_to_connect_ms: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUdsp2pSessionStarted {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_remote: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub appid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsDeleteFileRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub is_explicit_delete: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsDeleteFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsDownloadRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub can_handle_http: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsDownloadResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub raw_file_size: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag = "6")]
    pub time_stamp: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub is_explicit_delete: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub use_http: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "9")]
    pub http_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "11")]
    pub kv_headers: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "12")]
    pub use_https: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub encrypted: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsFileChunk {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "2")]
    pub file_start: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetFileListForApp {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub apps_to_query: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "2")]
    pub send_path_prefixes: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetFileListForAppResponse {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<CMsgClientUfsGetFileListForAppResponseFile>,
    #[prost(string, repeated, tag = "2")]
    pub path_prefixes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetFileListForAppResponseFile {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag = "4")]
    pub time_stamp: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "5")]
    pub raw_file_size: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub is_explicit_delete: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub platforms_to_sync: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub path_prefix_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetSingleFileInfo {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetSingleFileInfoResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag = "5")]
    pub time_stamp: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "6")]
    pub raw_file_size: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "7")]
    pub is_explicit_delete: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetUgcDetails {
    #[prost(fixed64, optional, tag = "1", default = "18446744073709551615")]
    pub hcontent: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsGetUgcDetailsResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "5")]
    pub steamid_creator: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "6")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub compressed_file_size: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub rangecheck_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub file_encoded_sha1: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsLoginRequest {
    #[prost(uint32, optional, tag = "1")]
    pub protocol_version: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub am_session_token: ::core::option::Option<u64>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub apps: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsLoginResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsShareFile {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsShareFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed64, optional, tag = "2", default = "18446744073709551615")]
    pub hcontent: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsTransferHeartbeat {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadCommit {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<CMsgClientUfsUploadCommitFile>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadCommitFile {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "4")]
    pub cub_file: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadCommitResponse {
    #[prost(message, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<CMsgClientUfsUploadCommitResponseFile>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadCommitResponseFile {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadFileFinished {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadFileRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub raw_file_size: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint64, optional, tag = "5")]
    pub time_stamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub platforms_to_sync_deprecated: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8", default = "4294967295")]
    pub platforms_to_sync: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "10")]
    pub can_encrypt: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUfsUploadFileResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "3")]
    pub use_http: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub http_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "6")]
    pub kv_headers: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "7")]
    pub use_https: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub encrypt_file: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUgsGetGlobalStats {
    #[prost(uint64, optional, tag = "1")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub history_days_requested: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "3")]
    pub time_last_requested: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub first_day_cached: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub days_cached: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUgsGetGlobalStatsResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(fixed32, optional, tag = "2")]
    pub timestamp: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub day_current: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub days: ::prost::alloc::vec::Vec<CMsgClientUgsGetGlobalStatsResponseDay>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUgsGetGlobalStatsResponseDay {
    #[prost(uint32, optional, tag = "1")]
    pub day_id: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub stats: ::prost::alloc::vec::Vec<CMsgClientUgsGetGlobalStatsResponseDayStat>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUgsGetGlobalStatsResponseDayStat {
    #[prost(int32, optional, tag = "1")]
    pub stat_id: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "2")]
    pub data: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUiMode {
    #[prost(uint32, optional, tag = "1")]
    pub uimode: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub chat_mode: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUninstallClientApp {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUninstallClientAppResponse {
    #[prost(uint32, optional, tag = "1")]
    pub result: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUnsignedInstallScript {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub file_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub file_size: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub signature_broken: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5")]
    pub depot_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "6")]
    pub manifest_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "7")]
    pub file_flags: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUpdateAppJobReport {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub depot_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub app_state: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub job_app_error: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub error_details: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub job_duration: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub files_validation_failed: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "8")]
    pub job_bytes_downloaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub job_bytes_staged: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub bytes_comitted: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "11")]
    pub start_app_state: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "12")]
    pub stats_machine_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "13")]
    pub branch_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "14")]
    pub total_bytes_downloaded: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub total_bytes_staged: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub total_bytes_restored: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "17")]
    pub is_borrowed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "18")]
    pub is_free_weekend: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "19")]
    pub total_bytes_legacy: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub total_bytes_patched: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "21")]
    pub total_bytes_saved: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "22")]
    pub cell_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUpdateMachineAuth {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub offset: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub cubtowrite: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub bytes: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub otp_type: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub otp_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub otp_sharedsecret: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "8")]
    pub otp_timedrift: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUpdateMachineAuthResponse {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub filesize: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub sha_file: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub getlasterror: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub offset: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub cubwrote: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "8")]
    pub otp_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "9")]
    pub otp_value: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "10")]
    pub otp_identifier: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUpdateUserGameInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_idgs: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub game_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_port: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUseLocalDeviceAuthorizations {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub authorization_account_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub device_tokens: ::prost::alloc::vec::Vec<CMsgClientUseLocalDeviceAuthorizationsDeviceToken>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUseLocalDeviceAuthorizationsDeviceToken {
    #[prost(uint32, optional, tag = "1")]
    pub owner_account_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub token_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientUserNotifications {
    #[prost(message, repeated, tag = "1")]
    pub notifications: ::prost::alloc::vec::Vec<CMsgClientUserNotificationsNotification>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientUserNotificationsNotification {
    #[prost(uint32, optional, tag = "1")]
    pub user_notification_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientVanityUrlChangedNotification {
    #[prost(string, optional, tag = "1")]
    pub vanity_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientVoiceCallPreAuthorize {
    #[prost(fixed64, optional, tag = "1")]
    pub caller_steamid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub receiver_steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub caller_id: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub hangup: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientVoiceCallPreAuthorizeResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub caller_steamid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub receiver_steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub caller_id: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientWalletInfoUpdate {
    #[prost(bool, optional, tag = "1")]
    pub has_wallet: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "2")]
    pub balance: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub currency: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub balance_delayed: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub balance64: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "6")]
    pub balance64_delayed: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemChangesRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub last_time_updated: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub num_items_needed: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemChangesResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub update_time: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "5")]
    pub workshop_items:
        ::prost::alloc::vec::Vec<CMsgClientWorkshopItemChangesResponseWorkshopItemInfo>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemChangesResponseWorkshopItemInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub time_updated: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "3")]
    pub manifest_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemInfoRequest {
    #[prost(uint32, optional, tag = "1")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub last_time_updated: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "3")]
    pub workshop_items: ::prost::alloc::vec::Vec<CMsgClientWorkshopItemInfoRequestWorkshopItem>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemInfoRequestWorkshopItem {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub time_updated: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemInfoResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub update_time: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "3")]
    pub workshop_items:
        ::prost::alloc::vec::Vec<CMsgClientWorkshopItemInfoResponseWorkshopItemInfo>,
    #[prost(fixed64, repeated, packed = "false", tag = "4")]
    pub private_items: ::prost::alloc::vec::Vec<u64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgClientWorkshopItemInfoResponseWorkshopItemInfo {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub time_updated: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "3")]
    pub manifest_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub is_legacy: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgCloudPendingRemoteOperations {
    #[prost(message, repeated, tag = "1")]
    pub operations: ::prost::alloc::vec::Vec<CCloudPendingRemoteOperation>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerActionSetMiscSettings {
    #[prost(string, optional, tag = "1")]
    pub cursor_visible_action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub cursor_hidden_action_set_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerConfiguration {
    #[prost(uint32, optional, tag = "1")]
    pub binding_handle: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub creator: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub controller_type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "6")]
    pub sets: ::prost::alloc::vec::Vec<CMsgGameActionSet>,
    #[prost(message, repeated, tag = "7")]
    pub modes: ::prost::alloc::vec::Vec<CMsgControllerMode>,
    #[prost(string, optional, tag = "8")]
    pub error_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub action_block_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "10")]
    pub misc_action_set_settings: ::core::option::Option<CMsgControllerActionSetMiscSettings>,
    #[prost(string, optional, tag = "11")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInput {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub activators: ::prost::alloc::vec::Vec<CMsgControllerInputActivator>,
    #[prost(message, repeated, tag = "3")]
    pub disabled_activators: ::prost::alloc::vec::Vec<CMsgControllerInputActivator>,
    #[prost(bool, optional, tag = "4")]
    pub inherited_from_parentset: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputActivator {
    #[prost(int32, optional, tag = "1")]
    pub activation: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub bindings: ::prost::alloc::vec::Vec<CMsgControllerInputBinding>,
    #[prost(message, repeated, tag = "3")]
    pub settings: ::prost::alloc::vec::Vec<CMsgControllerSetting>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputBinding {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub key_binding_data: ::core::option::Option<CMsgControllerInputBindingKeyBindingData>,
    #[prost(message, optional, tag = "3")]
    pub keyboard_key: ::core::option::Option<CMsgControllerInputKeyBinding>,
    #[prost(message, optional, tag = "4")]
    pub mouse_button: ::core::option::Option<CMsgControllerInputMouseButtonBinding>,
    #[prost(message, optional, tag = "5")]
    pub gamepad_button: ::core::option::Option<CMsgControllerInputGamepadButtonBinding>,
    #[prost(message, optional, tag = "6")]
    pub mouse_wheel: ::core::option::Option<CMsgControllerInputMouseWheelBinding>,
    #[prost(message, optional, tag = "7")]
    pub mode_shift: ::core::option::Option<CMsgControllerInputModeShiftBinding>,
    #[prost(message, optional, tag = "8")]
    pub game_action: ::core::option::Option<CMsgControllerInputGameActionBinding>,
    #[prost(message, optional, tag = "9")]
    pub controller_action: ::core::option::Option<CMsgControllerInputControllerActionBinding>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputBindingIconBindingData {
    #[prost(string, optional, tag = "1")]
    pub icon_filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub color_foreground: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub color_background: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub icon_url: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputBindingKeyBindingData {
    #[prost(string, optional, tag = "1")]
    pub keys_bound_utf8: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub friendly_name_utf8: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub icon_data: ::core::option::Option<CMsgControllerInputBindingIconBindingData>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionBinding {
    #[prost(int32, optional, tag = "1")]
    pub action: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub mouse: ::core::option::Option<CMsgControllerInputControllerActionMouseBinding>,
    #[prost(message, optional, tag = "3")]
    pub camera_horizon_reset:
        ::core::option::Option<CMsgControllerInputControllerActionCameraHorizonReset>,
    #[prost(message, optional, tag = "4")]
    pub dots_per_360_calibration_spin:
        ::core::option::Option<CMsgControllerInputControllerActionDotsPer360CalibrationSpin>,
    #[prost(message, optional, tag = "5")]
    pub turn_to_face_direction:
        ::core::option::Option<CMsgControllerInputControllerActionTurnToFaceDirection>,
    #[prost(message, optional, tag = "6")]
    pub action_set: ::core::option::Option<CMsgControllerInputControllerActionGameActionSetBinding>,
    #[prost(message, optional, tag = "7")]
    pub led_color: ::core::option::Option<CMsgControllerInputControllerActionLedColorBinding>,
    #[prost(message, optional, tag = "8")]
    pub change_player_number:
        ::core::option::Option<CMsgControllerInputControllerActionChangePlayerNumberBinding>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionCameraHorizonReset {
    #[prost(int32, optional, tag = "1")]
    pub camera_dip_angle: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub delay_duration: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub camera_horizon_reset_angle: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionChangePlayerNumberBinding {
    #[prost(int32, optional, tag = "1")]
    pub player_number: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionDotsPer360CalibrationSpin {
    #[prost(int32, optional, tag = "1")]
    pub spin_by_amount: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub spin_duration: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionGameActionSetBinding {
    #[prost(int32, optional, tag = "1")]
    pub preset_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub display: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub beep: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionLedColorBinding {
    #[prost(int32, optional, tag = "1")]
    pub setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub brightness: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub saturation: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub color_r: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub color_g: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub color_b: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionMouseBinding {
    #[prost(sint32, optional, tag = "1")]
    pub x: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "2")]
    pub y: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub restore: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputControllerActionTurnToFaceDirection {
    #[prost(int32, optional, tag = "1")]
    pub source_of_direction: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub turn_duration: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub use_last_direction_if_deadzoned: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputGameActionBinding {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_key: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputGamepadButtonBinding {
    #[prost(int32, optional, tag = "1")]
    pub button: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputKeyBinding {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputModeShiftBinding {
    #[prost(int32, optional, tag = "1")]
    pub source: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputMouseButtonBinding {
    #[prost(int32, optional, tag = "1")]
    pub button: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgControllerInputMouseWheelBinding {
    #[prost(int32, optional, tag = "1")]
    pub button: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerMode {
    #[prost(int32, optional, tag = "1")]
    pub mode: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub modeid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "4")]
    pub inputs: ::prost::alloc::vec::Vec<CMsgControllerInput>,
    #[prost(message, repeated, tag = "5")]
    pub settings: ::prost::alloc::vec::Vec<CMsgControllerSetting>,
    #[prost(string, optional, tag = "6")]
    pub friendlyname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub source: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "8")]
    pub virtual_menu_info: ::core::option::Option<CMsgControllerVirtualMenuPreviewInfo>,
    #[prost(bool, optional, tag = "9")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "10")]
    pub reference_modeid: ::core::option::Option<u32>,
    #[prost(int32, repeated, packed = "false", tag = "11")]
    pub mode_shift_buttons: ::prost::alloc::vec::Vec<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerSetting {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "2")]
    pub int_value: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "3")]
    pub int_min: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "4")]
    pub int_max: ::core::option::Option<i32>,
    #[prost(sint32, optional, tag = "5")]
    pub int_default: ::core::option::Option<i32>,
    #[prost(message, optional, boxed, tag = "6")]
    pub parentset_setting:
        ::core::option::Option<::prost::alloc::boxed::Box<CMsgControllerSetting>>,
    #[prost(sint64, optional, tag = "7")]
    pub long_value: ::core::option::Option<i64>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerSourceGroup {
    #[prost(int32, optional, tag = "1")]
    pub mode: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub game_action: ::core::option::Option<CMsgControllerInputGameActionBinding>,
    #[prost(message, repeated, tag = "3")]
    pub inputs: ::prost::alloc::vec::Vec<CMsgControllerInput>,
    #[prost(message, repeated, tag = "4")]
    pub settings: ::prost::alloc::vec::Vec<CMsgControllerSetting>,
    #[prost(uint32, optional, tag = "5")]
    pub modeid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(message, optional, boxed, tag = "7")]
    pub mode_shift_source_group:
        ::core::option::Option<::prost::alloc::boxed::Box<CMsgControllerSourceGroup>>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerSources {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub active_group: ::core::option::Option<CMsgControllerSourceGroup>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgControllerVirtualMenuPreviewInfo {
    #[prost(int32, optional, tag = "1")]
    pub source: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "2")]
    pub x_pos: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub y_pos: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub opacity: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "5")]
    pub scale: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "6")]
    pub show_labels: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub menu_style: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "8")]
    pub force_on: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "9")]
    pub keys: ::prost::alloc::vec::Vec<CVirtualMenuKey>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgCreGetUserPublishedItemVoteDetails {
    #[prost(message, repeated, tag = "1")]
    pub published_file_ids:
        ::prost::alloc::vec::Vec<CMsgCreGetUserPublishedItemVoteDetailsPublishedFileId>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreGetUserPublishedItemVoteDetailsPublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgCreGetUserPublishedItemVoteDetailsResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub user_item_vote_details:
        ::prost::alloc::vec::Vec<CMsgCreGetUserPublishedItemVoteDetailsResponseUserItemVoteDetail>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreGetUserPublishedItemVoteDetailsResponseUserItemVoteDetail {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2", default = "0")]
    pub vote: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgCreItemVoteSummary {
    #[prost(message, repeated, tag = "1")]
    pub published_file_ids: ::prost::alloc::vec::Vec<CMsgCreItemVoteSummaryPublishedFileId>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreItemVoteSummaryPublishedFileId {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgCreItemVoteSummaryResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub item_vote_summaries:
        ::prost::alloc::vec::Vec<CMsgCreItemVoteSummaryResponseItemVoteSummary>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreItemVoteSummaryResponseItemVoteSummary {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub votes_for: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub votes_against: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub reports: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "5")]
    pub score: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreUpdateUserPublishedItemVote {
    #[prost(fixed64, optional, tag = "1")]
    pub published_file_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub vote_up: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgCreUpdateUserPublishedItemVoteResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgDownloadRateStatistics {
    #[prost(uint32, optional, tag = "1")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub stats: ::prost::alloc::vec::Vec<CMsgDownloadRateStatisticsStatsInfo>,
    #[prost(uint32, optional, tag = "3")]
    pub throttling_kbps: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub steam_realm: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgDownloadRateStatisticsStatsInfo {
    #[prost(uint32, optional, tag = "1")]
    pub source_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub source_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub seconds: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "4")]
    pub bytes: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "5")]
    pub host_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "6")]
    pub microseconds: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub used_ipv6: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub proxied: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgDpGetNumberOfCurrentPlayers {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgDpGetNumberOfCurrentPlayersResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub player_count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgDrmDownloadRequestWithCrashData {
    #[prost(uint32, optional, tag = "1")]
    pub download_flags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub download_types_known: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub guid_drm: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub guid_split: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub guid_merge: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "6")]
    pub module_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub module_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub crash_data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgDrmDownloadResponse {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub blob_download_type: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub merge_guid: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "5")]
    pub download_file_dfs_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub download_file_dfs_port: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub download_file_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub module_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgDrmFinalResult {
    #[prost(uint32, optional, tag = "1", default = "2")]
    pub e_result: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub blob_download_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub error_detail: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub merge_guid: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(uint32, optional, tag = "6")]
    pub download_file_dfs_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub download_file_dfs_port: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub download_file_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgFsEnumerateFollowingList {
    #[prost(uint32, optional, tag = "1")]
    pub start_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgFsEnumerateFollowingListResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub total_results: ::core::option::Option<i32>,
    #[prost(fixed64, repeated, packed = "false", tag = "3")]
    pub steam_ids: ::prost::alloc::vec::Vec<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgFsGetFollowerCount {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgFsGetFollowerCountResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2", default = "0")]
    pub count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgFsGetIsFollowing {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgFsGetIsFollowingResponse {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2", default = "false")]
    pub is_following: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameAction {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, repeated, packed = "false", tag = "3")]
    pub modes: ::prost::alloc::vec::Vec<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameActionBindingType {
    #[prost(int32, optional, tag = "1")]
    pub key: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub actions: ::prost::alloc::vec::Vec<CMsgGameAction>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameActionSet {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub legacy_set: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "4")]
    pub layers: ::prost::alloc::vec::Vec<CMsgGameActionSet>,
    #[prost(message, repeated, tag = "5")]
    pub action_binding_types: ::prost::alloc::vec::Vec<CMsgGameActionBindingType>,
    #[prost(message, repeated, tag = "6")]
    pub source_bindings: ::prost::alloc::vec::Vec<CMsgControllerSources>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameServerData {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_gs: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub deprecated_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub query_port: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_port: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub sourcetv_port: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub gamedir: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub product: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "11")]
    pub players: ::prost::alloc::vec::Vec<CMsgGameServerDataPlayer>,
    #[prost(uint32, optional, tag = "12")]
    pub max_players: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub bot_count: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "14")]
    pub password: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub secure: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub dedicated: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "17")]
    pub os: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub game_data: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "19")]
    pub game_data_version: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "20")]
    pub game_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub map: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "23")]
    pub game_ip_address: ::core::option::Option<CMsgIpAddress>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGameServerDataPlayer {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameServerOutOfDate {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_gs: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub reject: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameServerPingSample {
    #[prost(fixed32, optional, tag = "1")]
    pub my_ip: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub gs_app_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "3")]
    pub gs_samples: ::prost::alloc::vec::Vec<CMsgGameServerPingSampleSample>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGameServerPingSampleSample {
    #[prost(fixed32, optional, tag = "1")]
    pub ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub avg_ping_ms: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub stddev_ping_ms_x10: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGameServerRemove {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub deprecated_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub query_port: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGcClient {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub msgtype: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub payload: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(fixed64, optional, tag = "4")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "5")]
    pub gcname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub ip: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGcRoutingProtoBufHeader {
    #[prost(uint64, optional, tag = "1")]
    pub dst_gcid_queue: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub dst_gc_dir_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGenerateSystemReportReply {
    #[prost(string, optional, tag = "1")]
    pub report_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGmsClientServerQueryResponse {
    #[prost(message, repeated, tag = "1")]
    pub servers: ::prost::alloc::vec::Vec<CMsgGmsClientServerQueryResponseServer>,
    #[prost(string, optional, tag = "2")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGmsClientServerQueryResponseServer {
    #[prost(uint32, optional, tag = "1")]
    pub deprecated_server_ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub server_port: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub auth_players: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub server_ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsApprove {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "2")]
    pub owner_steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsAssociateWithClan {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_clan: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsAssociateWithClanResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_clan: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsComputeNewPlayerCompatibility {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_candidate: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsComputeNewPlayerCompatibilityResponse {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id_candidate: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub is_clan_member: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub ct_dont_like_you: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub ct_you_dont_like: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub ct_clanmembers_dont_like_you: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGsDeny {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub edeny_reason: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub deny_string: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsDisconnectNotice {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsKick {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub edeny_reason: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGsPlayerList {
    #[prost(message, repeated, tag = "1")]
    pub players: ::prost::alloc::vec::Vec<CMsgGsPlayerListPlayer>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGsPlayerListPlayer {
    #[prost(uint64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "4")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGsServerType {
    #[prost(uint32, optional, tag = "1")]
    pub app_id_served: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub flags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub deprecated_game_ip_address: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub game_port: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub game_dir: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub game_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub game_query_port: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgGsStatusReply {
    #[prost(bool, optional, tag = "1")]
    pub is_secure: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgGsUserPlaying {
    #[prost(fixed64, optional, tag = "1")]
    pub steam_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub deprecated_public_ip: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub token: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "4")]
    pub public_ip: ::core::option::Option<CMsgIpAddress>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgHotkey {
    #[prost(uint32, optional, tag = "1")]
    pub key_code: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub alt_key: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub shift_key: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub ctrl_key: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub meta_key: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Authentication, AuthenticationSupport, Community, common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgIpAddress {
    #[prost(fixed32, optional, tag = "1")]
    pub v4: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub v6: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgIpAddressBucket {
    #[prost(message, optional, tag = "1")]
    pub original_ip_address: ::core::option::Option<CMsgIpAddress>,
    #[prost(fixed64, optional, tag = "2")]
    pub bucket: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgMobileChatFriendMessage {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid_friend: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub local_echo: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub chat_entry_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(fixed32, optional, tag = "5")]
    pub current_message_timestamp: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "6")]
    pub current_message_ordinal: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "7")]
    pub previous_message_timestamp: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "8")]
    pub previous_message_ordinal: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "9")]
    pub client_message_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgMonitorInfo {
    #[prost(string, optional, tag = "1")]
    pub selected_display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub monitors: ::prost::alloc::vec::Vec<CMsgMonitorInfoMonitorInfo>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgMonitorInfoMonitorInfo {
    #[prost(string, optional, tag = "1")]
    pub monitor_device_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub monitor_display_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgMulti {
    #[prost(uint32, optional, tag = "1")]
    pub size_unzipped: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub message_body: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceConnect {
    #[prost(uint32, optional, tag = "1", default = "0")]
    pub device_id: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "2")]
    pub ap_known: ::core::option::Option<CMsgNetworkDeviceConnectKnownAp>,
    #[prost(message, optional, tag = "3")]
    pub ap_custom: ::core::option::Option<CMsgNetworkDeviceConnectCustomAp>,
    #[prost(message, optional, tag = "4")]
    pub credentials: ::core::option::Option<CMsgNetworkDeviceConnectCredentials>,
    #[prost(message, optional, tag = "5")]
    pub ip4: ::core::option::Option<CMsgNetworkDeviceIp4Config>,
    #[prost(message, optional, tag = "6")]
    pub ip6: ::core::option::Option<CMsgNetworkDeviceIp6Config>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceConnectCredentials {
    #[prost(string, optional, tag = "1")]
    pub username: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceConnectCustomAp {
    #[prost(string, optional, tag = "1")]
    pub ssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub esecurity: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceConnectKnownAp {
    #[prost(uint32, optional, tag = "1")]
    pub ap_id: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceIp4Address {
    #[prost(int32, optional, tag = "1", default = "0")]
    pub ip: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub netmask: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceIp4Config {
    #[prost(message, repeated, tag = "1")]
    pub addresses: ::prost::alloc::vec::Vec<CMsgNetworkDeviceIp4Address>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub dns_ip: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "3")]
    pub gateway_ip: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub is_dhcp_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_default_route: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6", default = "false")]
    pub is_enabled: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceIp6Address {
    #[prost(string, optional, tag = "1", default = "")]
    pub ip: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDeviceIp6Config {
    #[prost(message, repeated, tag = "1")]
    pub addresses: ::prost::alloc::vec::Vec<CMsgNetworkDeviceIp6Address>,
    #[prost(string, repeated, tag = "2")]
    pub dns_ip: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub gateway_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub is_dhcp_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_default_route: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6", default = "false")]
    pub is_enabled: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDevicesData {
    #[prost(message, repeated, tag = "1")]
    pub devices: ::prost::alloc::vec::Vec<CMsgNetworkDevicesDataDevice>,
    #[prost(bool, optional, tag = "2")]
    pub is_wifi_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub is_wifi_scanning_enabled: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDevicesDataDevice {
    #[prost(uint32, optional, tag = "1", default = "0")]
    pub id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub etype: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub estate: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub mac: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub vendor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub product: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub ip4: ::core::option::Option<CMsgNetworkDeviceIp4Config>,
    #[prost(message, optional, tag = "8")]
    pub ip6: ::core::option::Option<CMsgNetworkDeviceIp6Config>,
    #[prost(message, optional, tag = "9")]
    pub wired: ::core::option::Option<CMsgNetworkDevicesDataDeviceWired>,
    #[prost(message, optional, tag = "10")]
    pub wireless: ::core::option::Option<CMsgNetworkDevicesDataDeviceWireless>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDevicesDataDeviceWired {
    #[prost(bool, optional, tag = "1", default = "false")]
    pub is_cable_present: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "2")]
    pub speed_mbit: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub friendly_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDevicesDataDeviceWireless {
    #[prost(message, repeated, tag = "1")]
    pub aps: ::prost::alloc::vec::Vec<CMsgNetworkDevicesDataDeviceWirelessAp>,
    #[prost(int32, optional, tag = "2")]
    pub esecurity_supported: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgNetworkDevicesDataDeviceWirelessAp {
    #[prost(uint32, optional, tag = "1", default = "0")]
    pub id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub estrength: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub ssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub is_active: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_autoconnect: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub esecurity: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub user_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub strength_raw: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgPersonaChangeResponse {
    #[prost(uint32, optional, tag = "1")]
    pub result: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub player_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgProtoBufHeader {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub client_sessionid: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub routing_appid: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "10", default = "18446744073709551615")]
    pub jobid_source: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "11", default = "18446744073709551615")]
    pub jobid_target: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "12")]
    pub target_job_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "13", default = "2")]
    pub eresult: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "14")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "15")]
    pub ip: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub auth_account_flags: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "17", default = "1")]
    pub transport_error: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "18", default = "18446744073709551615")]
    pub messageid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "19")]
    pub publisher_group_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "20")]
    pub sysid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "21")]
    pub trace_tag: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "22")]
    pub token_source: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "23")]
    pub admin_spoofing_user: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "24")]
    pub seq_num: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "25")]
    pub webapi_key_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "26")]
    pub is_from_external_source: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "27")]
    pub forward_to_sysid: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "28")]
    pub cm_sysid: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "29")]
    pub ip_v6: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "30")]
    pub wg_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "31", default = "0")]
    pub launcher_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "32", default = "0")]
    pub realm: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "33", default = "-1")]
    pub timeout_ms: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "34")]
    pub debug_source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "35")]
    pub debug_source_string_index: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "36")]
    pub token_id: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "37")]
    pub routing_gc: ::core::option::Option<CMsgGcRoutingProtoBufHeader>,
    #[prost(int32, optional, tag = "38", default = "0")]
    pub session_disposition: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "39")]
    pub wg_token_field_39: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub webui_auth_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, repeated, packed = "false", tag = "41")]
    pub exclude_client_sessionids: ::prost::alloc::vec::Vec<i32>,
    #[prost(fixed64, optional, tag = "43")]
    pub admin_request_spoofing_steamid: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "44")]
    pub is_valveds: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgProtobufWrapped {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub message_body: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSelectOsBranchParams {
    #[prost(int32, optional, tag = "1")]
    pub branch: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub custom_branch: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetControllerActionSet {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub new_display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub action_set_to_copy_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetControllerInputActivator {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_binding_key: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub input_key: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub activator_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub new_activation: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "8")]
    pub new_setting: ::core::option::Option<CMsgControllerSetting>,
    #[prost(int32, optional, tag = "9")]
    pub modeid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetControllerInputActivatorEnabled {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_binding_key: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub input_key: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub activator_index: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub modeid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetControllerInputBinding {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_binding_key: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub input_key: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub activator_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub binding_index: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "8")]
    pub new_binding: ::core::option::Option<CMsgControllerInputBinding>,
    #[prost(int32, optional, tag = "9")]
    pub source_mode: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub modeid: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetControllerSourceMode {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_binding_key: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub new_mode: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "6")]
    pub new_game_action: ::core::option::Option<CMsgControllerInputGameActionBinding>,
    #[prost(message, optional, tag = "7")]
    pub new_setting: ::core::option::Option<CMsgControllerSetting>,
    #[prost(string, optional, tag = "8")]
    pub new_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub modeid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "10")]
    pub change_mode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub new_virtual_menu: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub enable_virtual_menu_support: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSetModeShiftButton {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub modeid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub source: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub mode_shift_buttons_digital_io: ::prost::alloc::vec::Vec<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSteamDatagramConnectionQuality {
    #[prost(message, optional, tag = "1")]
    pub instantaneous: ::core::option::Option<CMsgSteamDatagramLinkInstantaneousStats>,
    #[prost(message, optional, tag = "2")]
    pub lifetime: ::core::option::Option<CMsgSteamDatagramLinkLifetimeStats>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSteamDatagramLinkInstantaneousStats {
    #[prost(uint32, optional, tag = "1")]
    pub out_packets_per_sec_x10: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub out_bytes_per_sec: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub in_packets_per_sec_x10: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub in_bytes_per_sec: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub ping_ms: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub packets_dropped_pct: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub packets_weird_sequence_pct: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub peak_jitter_usec: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSteamDatagramLinkLifetimeStats {
    #[prost(uint32, optional, tag = "2")]
    pub connected_seconds: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub packets_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub kb_sent: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub packets_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub kb_recv: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub packets_recv_sequenced: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub packets_recv_dropped: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub packets_recv_out_of_order: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub packets_recv_duplicate: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub packets_recv_lurch: ::core::option::Option<u64>,
    #[prost(uint64, repeated, packed = "false", tag = "12")]
    pub multipath_packets_recv_sequenced: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint64, repeated, packed = "false", tag = "13")]
    pub multipath_packets_recv_later: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint32, optional, tag = "14")]
    pub multipath_send_enabled: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "15")]
    pub packets_recv_out_of_order_corrected: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "21")]
    pub quality_histogram_100: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "22")]
    pub quality_histogram_99: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "23")]
    pub quality_histogram_97: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "24")]
    pub quality_histogram_95: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "25")]
    pub quality_histogram_90: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "26")]
    pub quality_histogram_75: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "27")]
    pub quality_histogram_50: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "28")]
    pub quality_histogram_1: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "29")]
    pub quality_histogram_dead: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "30")]
    pub quality_ntile_2nd: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "31")]
    pub quality_ntile_5th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "32")]
    pub quality_ntile_25th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "33")]
    pub quality_ntile_50th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "41")]
    pub ping_histogram_25: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "42")]
    pub ping_histogram_50: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "43")]
    pub ping_histogram_75: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "44")]
    pub ping_histogram_100: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "45")]
    pub ping_histogram_125: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "46")]
    pub ping_histogram_150: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "47")]
    pub ping_histogram_200: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "48")]
    pub ping_histogram_300: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "49")]
    pub ping_histogram_max: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "50")]
    pub ping_ntile_5th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "51")]
    pub ping_ntile_50th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "52")]
    pub ping_ntile_75th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "53")]
    pub ping_ntile_95th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "54")]
    pub ping_ntile_98th: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "61")]
    pub jitter_histogram_negligible: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "62")]
    pub jitter_histogram_1: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "63")]
    pub jitter_histogram_2: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "64")]
    pub jitter_histogram_5: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "65")]
    pub jitter_histogram_10: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "66")]
    pub jitter_histogram_20: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSteamDatagramP2pRoutingSummary {
    #[prost(message, optional, tag = "2")]
    pub ice: ::core::option::Option<CMsgSteamNetworkingIceSessionSummary>,
    #[prost(message, optional, tag = "3")]
    pub sdr: ::core::option::Option<CMsgSteamNetworkingP2psdrRoutingSummary>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSteamNetworkingIceSessionSummary {
    #[prost(uint32, optional, tag = "1")]
    pub local_candidate_types: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub remote_candidate_types: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub initial_route_kind: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub initial_ping: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub negotiation_ms: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub initial_score: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub failure_reason_code: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub selected_seconds: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub user_settings: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub ice_enable_var: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub local_candidate_types_allowed: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub best_route_kind: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub best_ping: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub best_score: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19")]
    pub best_time: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSteamNetworkingP2psdrRoutingSummary {
    #[prost(uint32, optional, tag = "1")]
    pub initial_ping: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub initial_ping_front_local: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub initial_ping_front_remote: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub initial_score: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "5")]
    pub initial_pop_local: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "6")]
    pub initial_pop_remote: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub negotiation_ms: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub selected_seconds: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub best_ping: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub best_ping_front_local: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub best_ping_front_remote: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub best_score: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "15")]
    pub best_pop_local: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "16")]
    pub best_pop_remote: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub best_time: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSwapControllerSourceModes {
    #[prost(string, optional, tag = "1")]
    pub action_set_key_a: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key_a: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_a: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub action_set_key_b: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub action_set_layer_key_b: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub source_b: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSwapModeInputBindings {
    #[prost(string, optional, tag = "1")]
    pub action_set_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub action_set_layer_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source_binding_key: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub mode_shift: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub modeid: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "6")]
    pub swaps: ::prost::alloc::vec::Vec<CMsgSwapModeInputBindingsCModeInputSwap>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSwapModeInputBindingsCModeInputSwap {
    #[prost(int32, optional, tag = "1")]
    pub old_key: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub new_key: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerDevice {
    #[prost(message, optional, tag = "1")]
    pub base: ::core::option::Option<CMsgSystemAudioManagerObject>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub nick: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub api: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerLink {
    #[prost(message, optional, tag = "1")]
    pub base: ::core::option::Option<CMsgSystemAudioManagerObject>,
    #[prost(uint32, optional, tag = "2")]
    pub output_node_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub output_port_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub input_node_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub input_port_id: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerNode {
    #[prost(message, optional, tag = "1")]
    pub base: ::core::option::Option<CMsgSystemAudioManagerObject>,
    #[prost(uint32, optional, tag = "2")]
    pub device_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub nick: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub edirection: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "7")]
    pub volume: ::core::option::Option<CMsgSystemAudioVolume>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerObject {
    #[prost(uint32, optional, tag = "1")]
    pub id: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "2")]
    pub rtime_last_update: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerPort {
    #[prost(message, optional, tag = "1")]
    pub base: ::core::option::Option<CMsgSystemAudioManagerObject>,
    #[prost(uint32, optional, tag = "3")]
    pub node_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub alias: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub etype: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub edirection: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub is_physical: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_terminal: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub is_control: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub is_monitor: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerState {
    #[prost(fixed32, optional, tag = "1")]
    pub rtime_filter: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub counter: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub hw: ::core::option::Option<CMsgSystemAudioManagerStateHw>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerStateHw {
    #[prost(message, repeated, tag = "1")]
    pub devices: ::prost::alloc::vec::Vec<CMsgSystemAudioManagerDevice>,
    #[prost(message, repeated, tag = "2")]
    pub nodes: ::prost::alloc::vec::Vec<CMsgSystemAudioManagerNode>,
    #[prost(message, repeated, tag = "3")]
    pub ports: ::prost::alloc::vec::Vec<CMsgSystemAudioManagerPort>,
    #[prost(message, repeated, tag = "4")]
    pub links: ::prost::alloc::vec::Vec<CMsgSystemAudioManagerLink>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioManagerUpdateSomething {
    #[prost(int32, optional, tag = "1")]
    pub counter: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioVolume {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<CMsgSystemAudioVolumeChannelEntry>,
    #[prost(bool, optional, tag = "2")]
    pub is_muted: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemAudioVolumeChannelEntry {
    #[prost(int32, optional, tag = "1")]
    pub echannel: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "2")]
    pub volume: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemDisplay {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub is_primary: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_internal: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub has_mode_override: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub width_mm: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub height_mm: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub current_mode_id: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "11")]
    pub modes: ::prost::alloc::vec::Vec<CMsgSystemDisplayMode>,
    #[prost(int32, optional, tag = "12")]
    pub refresh_rate_min: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub refresh_rate_max: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14")]
    pub is_vrr_capable: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub is_vrr_output_active: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub is_hdr_capable: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17")]
    pub is_hdr_output_active: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "18")]
    pub supported_refresh_rates: ::prost::alloc::vec::Vec<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemDisplayManagerSetMode {
    #[prost(int32, optional, tag = "1")]
    pub display_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub mode_id: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemDisplayManagerState {
    #[prost(message, repeated, tag = "1")]
    pub displays: ::prost::alloc::vec::Vec<CMsgSystemDisplay>,
    #[prost(bool, optional, tag = "2")]
    pub is_mode_switching_supported: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub compatibility_mode: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemDisplayMode {
    #[prost(int32, optional, tag = "1")]
    pub id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub width: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub height: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub refresh_hz: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemDockState {
    #[prost(message, optional, tag = "1")]
    pub update_state: ::core::option::Option<CMsgSystemDockUpdateState>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemDockUpdateFirmware {
    #[prost(bool, optional, tag = "1")]
    pub check_only: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemDockUpdateState {
    #[prost(int32, optional, tag = "1")]
    pub state: ::core::option::Option<i32>,
    #[prost(fixed32, optional, tag = "2")]
    pub rtime_last_checked: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub version_current: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub version_available: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "5")]
    pub stage_progress: ::core::option::Option<f32>,
    #[prost(fixed32, optional, tag = "6")]
    pub rtime_estimated_completion: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "7")]
    pub old_fw_workaround: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemManagerSettings {
    #[prost(float, optional, tag = "1")]
    pub idle_backlight_dim_battery_seconds: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub idle_backlight_dim_ac_seconds: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub idle_suspend_battery_seconds: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub idle_suspend_ac_seconds: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "5")]
    pub idle_suspend_supressed: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub is_adaptive_brightness_available: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub display_adaptive_brightness_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub display_nightmode_enabled: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "11")]
    pub display_nightmode_tintstrength: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "12")]
    pub display_nightmode_maxhue: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "13")]
    pub display_nightmode_maxsat: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "14")]
    pub display_nightmode_uiexp: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "15")]
    pub display_nightmode_blend: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "16")]
    pub display_nightmode_reset: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17")]
    pub display_nightmode_schedule_enabled: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "18")]
    pub display_nightmode_schedule_starttime: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "19")]
    pub display_nightmode_schedule_endtime: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "20")]
    pub display_diagnostics_enabled: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "21")]
    pub als_lux_primary: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "22")]
    pub als_lux_median: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "23")]
    pub display_backlight_raw: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "24")]
    pub display_brightness_adaptivemin: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "25")]
    pub display_brightness_adaptivemax: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "26")]
    pub is_wifi_powersave_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "27")]
    pub is_fan_control_available: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "28")]
    pub fan_control_mode: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "29")]
    pub is_display_brightness_available: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "31")]
    pub is_display_colormanagement_available: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "32")]
    pub display_colorgamut: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "33")]
    pub als_lux_alternate: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "34")]
    pub is_display_colortemp_available: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "35")]
    pub display_colortemp: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "36")]
    pub display_colortemp_default: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "37")]
    pub display_colortemp_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "38")]
    pub display_colorgamut_labelset: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "39")]
    pub display_brightness_overdrive_hdr_split: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfDiagnosticEntry {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfDiagnosticInfo {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<CMsgSystemPerfDiagnosticEntry>,
    #[prost(message, repeated, tag = "2")]
    pub interfaces: ::prost::alloc::vec::Vec<CMsgSystemPerfNetworkInterface>,
    #[prost(float, optional, tag = "3")]
    pub battery_temp_c: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfLimits {
    #[prost(int32, optional, tag = "1")]
    pub cpu_governor_manual_min_mhz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub cpu_governor_manual_max_mhz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub fsr_sharpness_min: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub fsr_sharpness_max: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub gpu_performance_manual_min_mhz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub gpu_performance_manual_max_mhz: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub perf_overlay_is_standalone: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_dynamic_vrs_available: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub is_manual_display_refresh_rate_available: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "10")]
    pub gpu_performance_levels_available: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "11")]
    pub display_refresh_manual_hz_min: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub display_refresh_manual_hz_max: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "13")]
    pub fps_limit_options: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "14")]
    pub tdp_limit_min: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub tdp_limit_max: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub display_external_refresh_manual_hz_min: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub display_external_refresh_manual_hz_max: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "21")]
    pub fps_limit_options_external: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "23")]
    pub is_vrr_supported: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "24")]
    pub is_dynamic_refresh_rate_in_steam_supported: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "26")]
    pub split_scaling_filters_available: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "27")]
    pub split_scaling_scalers_available: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, optional, tag = "30")]
    pub disable_refresh_rate_management: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfNetworkInterface {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "2")]
    pub timestamp: ::core::option::Option<f64>,
    #[prost(int64, optional, tag = "3")]
    pub tx_bytes_total: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub rx_bytes_total: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "5")]
    pub tx_bytes_per_sec: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub rx_bytes_per_sec: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfSettings {
    #[prost(message, optional, tag = "1")]
    pub global: ::core::option::Option<CMsgSystemPerfSettingsGlobal>,
    #[prost(message, optional, tag = "2")]
    pub per_app: ::core::option::Option<CMsgSystemPerfSettingsPerApp>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfSettingsGlobal {
    #[prost(float, optional, tag = "1")]
    pub diagnostic_update_rate: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "2")]
    pub system_trace_service_state: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub graphics_profiling_service_state: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub perf_overlay_service_state: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub perf_overlay_level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_show_perf_overlay_over_steam_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_advanced_settings_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub allow_external_display_refresh_control: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "12")]
    pub hdr_on_sdr_tonemap_operator: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "13")]
    pub is_hdr_debug_heatmap_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15", default = "true")]
    pub force_hdr_wide_gammut_for_sdr: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21")]
    pub is_color_management_enabled: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "22")]
    pub sdr_to_hdr_brightness: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfSettingsPerApp {
    #[prost(int32, optional, tag = "1")]
    pub gpu_performance_manual_mhz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub fps_limit: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_variable_resolution_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub is_dynamic_refresh_rate_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub tdp_limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub cpu_governor: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub cpu_governor_manual_mhz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub scaling_filter: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub fsr_sharpness: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub is_fps_limit_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub is_tdp_limit_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub is_low_latency_mode_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "13")]
    pub display_refresh_manual_hz: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14")]
    pub is_game_perf_profile_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "15")]
    pub gpu_performance_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "17")]
    pub display_external_refresh_manual_hz: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub fps_limit_external: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "19")]
    pub is_tearing_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20")]
    pub is_vrr_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "23")]
    pub use_dynamic_refresh_rate_in_steam: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "24")]
    pub split_scaling_filter: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "25")]
    pub split_scaling_scaler: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfState {
    #[prost(message, optional, tag = "1")]
    pub limits: ::core::option::Option<CMsgSystemPerfLimits>,
    #[prost(message, optional, tag = "2")]
    pub settings: ::core::option::Option<CMsgSystemPerfSettings>,
    #[prost(uint64, optional, tag = "3")]
    pub current_game_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub active_profile_game_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemPerfUpdateSettings {
    #[prost(uint64, optional, tag = "1")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub reset_to_default: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "3")]
    pub settings_delta: ::core::option::Option<CMsgSystemPerfSettings>,
    #[prost(bool, optional, tag = "4")]
    pub skip_storage_update: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemUpdateApplyParams {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub apply_types: ::prost::alloc::vec::Vec<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemUpdateApplyResult {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3", default = "false")]
    pub requires_client_restart: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4", default = "false")]
    pub requires_system_restart: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemUpdateCheckResult {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2", default = "2")]
    pub eresult: ::core::option::Option<u32>,
    #[prost(fixed32, optional, tag = "3")]
    pub rtime_checked: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub available: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub auto_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub system_restart_pending: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgSystemUpdateProgress {
    #[prost(float, optional, tag = "1")]
    pub stage_progress: ::core::option::Option<f32>,
    #[prost(int64, optional, tag = "2")]
    pub stage_size_bytes: ::core::option::Option<i64>,
    #[prost(fixed32, optional, tag = "3")]
    pub rtime_estimated_completion: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgSystemUpdateState {
    #[prost(int32, optional, tag = "1")]
    pub state: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub progress: ::core::option::Option<CMsgSystemUpdateProgress>,
    #[prost(message, repeated, tag = "3")]
    pub update_check_results: ::prost::alloc::vec::Vec<CMsgSystemUpdateCheckResult>,
    #[prost(message, repeated, tag = "4")]
    pub update_apply_results: ::prost::alloc::vec::Vec<CMsgSystemUpdateApplyResult>,
    #[prost(bool, optional, tag = "5")]
    pub supports_os_updates: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgTradingCancelTradeRequest {
    #[prost(uint64, optional, tag = "1")]
    pub other_steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CMsgTradingInitiateTradeRequest {
    #[prost(uint32, optional, tag = "1")]
    pub trade_request_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub other_steamid: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub other_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgTradingInitiateTradeResponse {
    #[prost(uint32, optional, tag = "1")]
    pub response: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub trade_request_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub other_steamid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub steamguard_required_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub new_device_cooldown_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub default_password_reset_probation_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub password_reset_probation_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub default_email_change_probation_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub email_change_probation_days: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgTradingStartSession {
    #[prost(uint64, optional, tag = "1")]
    pub other_steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CMsgWebUiTransportFailure {
    #[prost(uint32, optional, tag = "1")]
    pub connect_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CProductImpressionsFromClientNotification {
    #[prost(message, repeated, tag = "1")]
    pub impressions: ::prost::alloc::vec::Vec<CProductImpressionsFromClientNotificationImpression>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CProductImpressionsFromClientNotificationImpression {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub num_impressions: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CRemotePlaySessionStoppedNotification {
    #[prost(fixed64, optional, tag = "1")]
    pub record_id: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "2")]
    pub used_x264: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub used_h264: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub used_hevc: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrAudioSettingsChangeSettingsRequest {
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<CSteamVrAudioSettingsSettings>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrAudioSettingsRegisterForSettingsRequest {}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrAudioSettingsSettings {
    #[prost(message, optional, tag = "1")]
    pub main: ::core::option::Option<CSteamVrAudioSettingsSettingsChannel>,
    #[prost(message, optional, tag = "2")]
    pub audio_mirror: ::core::option::Option<CSteamVrAudioSettingsSettingsChannel>,
    #[prost(message, optional, tag = "3")]
    pub microphone: ::core::option::Option<CSteamVrAudioSettingsSettingsChannel>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrAudioSettingsSettingsChannel {
    #[prost(bool, optional, tag = "1")]
    pub available: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub muted: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "3")]
    pub volume: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrAudioSettingsSettingsChangedNotification {
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<CSteamVrAudioSettingsSettings>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrHeader {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrSettingsSetValueRequest {
    #[prost(string, optional, tag = "1")]
    pub section: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub settings_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub bool: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub int: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "5")]
    pub float: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "6")]
    pub string: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatActiveNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatConfigureVideoRequest {
    #[prost(bool, optional, tag = "1")]
    pub send: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub receive: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatConfigureVideoResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatExitRoomChatRequest {
    #[prost(uint64, optional, tag = "1")]
    pub chat_group_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub chat_room_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatExitRoomChatResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatGetAvatarUrlRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub profile_steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub avatar_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatGetAvatarUrlResponse {
    #[prost(string, optional, tag = "1")]
    pub profile_avatar_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatGroupNameNotification {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatInactiveNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatInitiateRoomChatRequest {
    #[prost(uint64, optional, tag = "1")]
    pub chat_group_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub chat_room_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatInitiateRoomChatResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatNewGroupChatMsgAddedNotification {
    #[prost(uint64, optional, tag = "1")]
    pub chat_group_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub chat_room_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub sender_accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub timestamp: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub ordinal: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatPerUserGainValueNotification {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub muted: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "3")]
    pub gain: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatPerUserVoiceStatusNotification {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub mic_muted_locally: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub output_muted_locally: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatReadyNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSendGroupChatMessageRequest {
    #[prost(string, optional, tag = "1")]
    pub message_with_bbcode: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSendGroupChatMessageResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSetDefaultSessionNotification {
    #[prost(uint64, optional, tag = "1")]
    pub chat_group_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub chat_room_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSetPerUserMutingRequest {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub muted: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSetPerUserMutingResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSetPerUserVideoRequest {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub receive: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrVoiceChatSetPerUserVideoResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrVrGamepadUiMessage {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub header: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub payload: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcActiveNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcCloseDataChannelRequest {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcCloseDataChannelResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcCreateDataChannelRequest {
    #[prost(string, optional, tag = "1")]
    pub label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub ordered: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "3")]
    pub max_retransmits: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub max_packet_life_time: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcCreateDataChannelResponse {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcDataChannelCloseNotification {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcDataChannelErrorNotification {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcDataChannelMessageNotification {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcDataChannelOpenNotification {
    #[prost(uint32, optional, tag = "1")]
    pub channel_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcInactiveNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamVrWebRtcOnDataChannelNotification {
    #[prost(fixed64, optional, tag = "1")]
    pub source_steamid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub channel_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub label: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: PartnerStoreBrowse, StoreBrowse
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetItemsRequest {
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "3")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
}
/// Used by: PartnerStoreBrowse, StoreBrowse
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetItemsResponse {
    #[prost(message, repeated, tag = "1")]
    pub store_items: ::prost::alloc::vec::Vec<StoreItem>,
}
/// Used by: Store, StoreBrowse, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePageFilter {
    #[prost(message, optional, tag = "1")]
    pub sale_filter: ::core::option::Option<CStorePageFilterSalePageFilter>,
    #[prost(message, optional, tag = "2")]
    pub content_hub_filter: ::core::option::Option<CStorePageFilterContentHubFilter>,
    #[prost(message, repeated, tag = "3")]
    pub store_filters: ::prost::alloc::vec::Vec<CStorePageFilterStoreFilter>,
}
/// Used by: Store, StoreBrowse, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePageFilterContentHubFilter {
    #[prost(string, optional, tag = "1")]
    pub hub_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub hub_category: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub hub_tagid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "4")]
    pub discount_filter: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "5")]
    pub optin: ::core::option::Option<CStorePageFilterContentHubFilterOptInInfo>,
}
/// Used by: Store, StoreBrowse, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePageFilterContentHubFilterOptInInfo {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub optin_tagid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub prune_tagid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub optin_only: ::core::option::Option<bool>,
}
/// Used by: Store, StoreBrowse, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStorePageFilterSalePageFilter {
    #[prost(uint32, optional, tag = "1")]
    pub sale_tagid: ::core::option::Option<u32>,
}
/// Used by: Store, StoreBrowse, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePageFilterStoreFilter {
    #[prost(string, optional, tag = "1")]
    pub filter_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub cache_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStreamingClientConfig {
    #[prost(int32, optional, tag = "1", default = "2")]
    pub quality: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub desired_resolution_x: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub desired_resolution_y: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub desired_framerate_numerator: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub desired_framerate_denominator: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "6", default = "-1")]
    pub desired_bitrate_kbps: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7", default = "true")]
    pub enable_hardware_decoding: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8", default = "false")]
    pub enable_performance_overlay: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9", default = "true")]
    pub enable_video_streaming: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10", default = "true")]
    pub enable_audio_streaming: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11", default = "true")]
    pub enable_input_streaming: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "12", default = "2")]
    pub audio_channels: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "13", default = "false")]
    pub enable_video_hevc: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14", default = "true")]
    pub enable_performance_icons: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15", default = "false")]
    pub enable_microphone_streaming: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "16")]
    pub controller_overlay_hotkey: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "17", default = "false")]
    pub enable_touch_controller_obsolete: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "19", default = "0")]
    pub p2p_scope: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "20", default = "false")]
    pub enable_audio_uncompressed: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "21")]
    pub display_limit: ::core::option::Option<CStreamVideoLimit>,
    #[prost(message, optional, tag = "22")]
    pub quality_limit: ::core::option::Option<CStreamVideoLimit>,
    #[prost(message, optional, tag = "23")]
    pub runtime_limit: ::core::option::Option<CStreamVideoLimit>,
    #[prost(message, repeated, tag = "24")]
    pub decoder_limit: ::prost::alloc::vec::Vec<CStreamVideoLimit>,
    #[prost(bool, optional, tag = "25", default = "false")]
    pub enable_unreliable_fec: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "26", default = "false")]
    pub enable_video_av1: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStreamingServerConfig {
    #[prost(bool, optional, tag = "1")]
    pub change_desktop_resolution: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub dynamically_adjust_resolution_obsolete: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub enable_capture_nvfbc: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub enable_hardware_encoding_nvidia_obsolete: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub enable_hardware_encoding_amd_obsolete: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub enable_hardware_encoding_intel_obsolete: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "7")]
    pub software_encoding_threads: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub enable_traffic_priority: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9", default = "0")]
    pub host_play_audio: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub enable_hardware_encoding: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStreamVideoLimit {
    #[prost(int32, optional, tag = "1")]
    pub codec: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub mode: ::core::option::Option<CStreamVideoMode>,
    #[prost(int32, optional, tag = "3")]
    pub bitrate_kbps: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub burst_bitrate_kbps: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStreamVideoMode {
    #[prost(uint32, optional, tag = "1")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub refresh_rate: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub refresh_rate_numerator: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub refresh_rate_denominator: ::core::option::Option<u32>,
}
/// Used by: Test_TransportError, TransportValidation
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CTransportValidationAppendToStringRequest {
    #[prost(string, repeated, tag = "1")]
    pub append_strings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Used by: Test_TransportError, TransportValidation
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CTransportValidationAppendToStringResponse {
    #[prost(string, optional, tag = "1")]
    pub combined_text: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: AccountCart, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CUserInterfaceCuratorData {
    #[prost(uint32, optional, tag = "1")]
    pub clanid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub listid: ::core::option::Option<u64>,
}
/// Used by: AccountCart, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserInterfaceNavData {
    #[prost(string, optional, tag = "1")]
    pub domain: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub controller: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub submethod: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub feature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub depth: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub countrycode: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "8")]
    pub webkey: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "9")]
    pub is_client: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "10")]
    pub curator_data: ::core::option::Option<CUserInterfaceCuratorData>,
    #[prost(bool, optional, tag = "11")]
    pub is_likely_bot: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub is_utm: ::core::option::Option<bool>,
}
/// Used by: GameRecordingClip, VideoClip
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CVideoGameRecordingSegmentInfo {
    #[prost(uint32, optional, tag = "1")]
    pub segment_number: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub segment_size_bytes: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub component_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub representation_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CVirtualMenuCreateDestroy {
    #[prost(bool, optional, tag = "1")]
    pub created: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "2")]
    pub controller_idx: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub menu_idx: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub source: ::core::option::Option<u32>,
    #[prost(float, optional, tag = "5")]
    pub x_position: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub y_position: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "7")]
    pub opacity: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "8")]
    pub scale: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "9")]
    pub show_labels: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub force_on: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "11")]
    pub app_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub menu_style: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "13")]
    pub popup_keys: ::prost::alloc::vec::Vec<CVirtualMenuCreateDestroyTouchMenuKey>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CVirtualMenuCreateDestroyTouchMenuKey {
    #[prost(uint32, optional, tag = "1")]
    pub key_idx: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub bound: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub placeholder: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "4")]
    pub binding_type: ::core::option::Option<u32>,
    #[prost(float, optional, tag = "5")]
    pub x: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub y: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "7")]
    pub width: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "8")]
    pub height: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "9")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub glyph_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub icon_filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub color_foreground: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub color_background: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "15")]
    pub quandrants: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CVirtualMenuKey {
    #[prost(uint32, optional, tag = "1")]
    pub key_index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub bound: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "3")]
    pub x: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub y: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "5")]
    pub width: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub height: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "7")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub glyph_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub icon_filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub color_foreground: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub color_background: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "13")]
    pub quadrants: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub binding_type: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardActionInvokedRequest {
    #[prost(uint32, optional, tag = "1")]
    pub action_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub toggle_value: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardActionInvokedResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardDesktopWindowClickedRequest {
    #[prost(uint32, optional, tag = "1")]
    pub window_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardDesktopWindowClickedResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardTabClickedRequest {
    #[prost(uint32, optional, tag = "1")]
    pub tab_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageDashboardTabClickedResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageErrorResponse {
    #[prost(int32, optional, tag = "1")]
    pub error: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub origin: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageExecuteSteamUrlRequest {
    #[prost(string, optional, tag = "1")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageExecuteSteamUrlResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageHeader {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub message_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub response_to_message_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub is_error_response: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageHideDashboardPopupRequest {
    #[prost(uint32, optional, tag = "1")]
    pub dashboard_popup_request_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageHideDashboardPopupResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageRemoteVideoStreamRequest {
    #[prost(uint32, optional, tag = "1")]
    pub source_accountid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub video_uniqueid: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageRemoteVideoStreamResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupRequest {
    #[prost(uint32, optional, tag = "1")]
    pub dashboard_popup_request_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub popup_overlay_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub parent_overlay_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub origin_on_parent:
        ::core::option::Option<CvrGamepadUiMessageShowDashboardPopupRequestNormalizedPosition>,
    #[prost(message, optional, tag = "5")]
    pub origin_on_popup:
        ::core::option::Option<CvrGamepadUiMessageShowDashboardPopupRequestNormalizedPosition>,
    #[prost(message, optional, tag = "6")]
    pub offset: ::core::option::Option<CvrGamepadUiMessageShowDashboardPopupRequestPosition>,
    #[prost(message, optional, tag = "7")]
    pub rotation: ::core::option::Option<CvrGamepadUiMessageShowDashboardPopupRequestRotation>,
    #[prost(bool, optional, tag = "8")]
    pub inherit_parent_pitch: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub inherit_parent_curvature: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "10")]
    pub clip_rect: ::core::option::Option<CvrGamepadUiMessageShowDashboardPopupRequestRect>,
    #[prost(bool, optional, tag = "11")]
    pub interactive: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub requires_laser: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub parent_device_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "14")]
    pub sort_order: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub parent_enum: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupRequestNormalizedPosition {
    #[prost(float, optional, tag = "1")]
    pub x: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub y: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupRequestPosition {
    #[prost(float, optional, tag = "1")]
    pub x_pixels: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub y_pixels: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub z_pixels: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub x_meters: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "5")]
    pub y_meters: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub z_meters: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupRequestRect {
    #[prost(float, optional, tag = "1")]
    pub u_min: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub v_min: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub u_max: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub v_max: ::core::option::Option<f32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupRequestRotation {
    #[prost(float, optional, tag = "1")]
    pub pitch_degrees: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "2")]
    pub yaw_degrees: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowDashboardPopupResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowGameRequest {
    #[prost(string, optional, tag = "1")]
    pub overlay_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowGameResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowOverlayRequest {
    #[prost(string, optional, tag = "1")]
    pub overlay_key: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiMessageShowOverlayResponse {}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedDashboardAction {
    #[prost(uint32, optional, tag = "1")]
    pub action_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub visible_in_dashboard_bar: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub enabled: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub icon: ::core::option::Option<CvrGamepadUiSharedDashboardActionIcon>,
    #[prost(message, optional, tag = "6")]
    pub icon_active: ::core::option::Option<CvrGamepadUiSharedDashboardActionIcon>,
    #[prost(int32, optional, tag = "7", default = "1")]
    pub invocation: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub active: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub special_invocation: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub visible_in_menu: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub is_menu: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "12")]
    pub parent_menu_action_id: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedDashboardActionIcon {
    #[prost(int32, optional, tag = "1")]
    pub r#enum: ::core::option::Option<i32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedDashboardTabIcon {
    #[prost(int32, optional, tag = "1")]
    pub r#enum: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub overlay: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub hwnd: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyDashboardActions {
    #[prost(message, repeated, tag = "1")]
    pub actions: ::prost::alloc::vec::Vec<CvrGamepadUiSharedDashboardAction>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyDashboardTabs {
    #[prost(message, repeated, tag = "1")]
    pub tabs: ::prost::alloc::vec::Vec<CvrGamepadUiSharedPathPropertyDashboardTabsTab>,
    #[prost(uint32, optional, tag = "2")]
    pub selected_tab_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub vr_settings_tab_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub vr_steam_tab_id: ::core::option::Option<u32>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyDashboardTabsTab {
    #[prost(uint32, optional, tag = "1")]
    pub tab_id: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub visible_in_dashboard_bar: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub icon: ::core::option::Option<CvrGamepadUiSharedDashboardTabIcon>,
    #[prost(bool, optional, tag = "5")]
    pub visible_in_dashboard_menu: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyDesktopWindows {
    #[prost(message, repeated, tag = "1")]
    pub windows: ::prost::alloc::vec::Vec<CvrGamepadUiSharedPathPropertyDesktopWindowsWindow>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyDesktopWindowsWindow {
    #[prost(uint32, optional, tag = "1")]
    pub window_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub hwnd: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub tab_id: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CvrGamepadUiSharedPathPropertyPowerOptions {
    #[prost(bool, optional, tag = "1")]
    pub can_sleep: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub can_shutdown: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub can_restart_system: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub can_exitvr: ::core::option::Option<bool>,
}
/// Used by: common.proto
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct EncryptedAppTicket {
    #[prost(uint32, optional, tag = "1")]
    pub ticket_version_no: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub crc_encryptedticket: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub cb_encrypteduserdata: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub cb_encrypted_appownershipticket: ::core::option::Option<u32>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub encrypted_ticket: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Used by: LoyaltyRewards, SaleItemRewards
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct LoyaltyRewardDefinition {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub defid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub community_item_class: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub community_item_type: ::core::option::Option<u32>,
    #[prost(int64, optional, tag = "6")]
    pub point_cost: ::core::option::Option<i64>,
    #[prost(uint32, optional, tag = "7")]
    pub timestamp_created: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub timestamp_updated: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub timestamp_available: ::core::option::Option<u32>,
    #[prost(int64, optional, tag = "10")]
    pub quantity: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "11")]
    pub internal_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub active: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "13")]
    pub community_item_data: ::core::option::Option<LoyaltyRewardDefinitionCommunityItemData>,
    #[prost(uint32, optional, tag = "14")]
    pub timestamp_available_end: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "15")]
    pub bundle_defids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub usable_duration: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub bundle_discount: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub timestamp_free_until: ::core::option::Option<u32>,
}
/// Used by: LoyaltyRewards, SaleItemRewards
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct LoyaltyRewardDefinitionBadgeData {
    #[prost(int32, optional, tag = "1")]
    pub level: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub image: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: LoyaltyRewards, SaleItemRewards
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct LoyaltyRewardDefinitionCommunityItemData {
    #[prost(string, optional, tag = "1")]
    pub item_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub item_title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub item_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub item_image_small: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub item_image_large: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub item_movie_webm: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub item_movie_mp4: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "8")]
    pub animated: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "9")]
    pub badge_data: ::prost::alloc::vec::Vec<LoyaltyRewardDefinitionBadgeData>,
    #[prost(string, optional, tag = "10")]
    pub item_movie_webm_small: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub item_movie_mp4_small: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub profile_theme_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "13")]
    pub tiled: ::core::option::Option<bool>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreBrowseContext {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub elanguage: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub steam_realm: ::core::option::Option<i32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreBrowseFilterFailure {
    #[prost(int32, optional, tag = "1", default = "0")]
    pub filter_failure: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub already_owned: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub on_wishlist: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub ignored: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub not_in_users_language: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub not_on_users_platform: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub demo_for_owned_game: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub dlc_for_unowned_game: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "20")]
    pub nonpreferred_product_type: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "21")]
    pub excluded_tagids: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, repeated, packed = "false", tag = "30")]
    pub excluded_content_descriptorids: ::prost::alloc::vec::Vec<i32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreBrowseItemDataRequest {
    #[prost(bool, optional, tag = "1")]
    pub include_assets: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub include_release: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub include_platforms: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub include_all_purchase_options: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub include_screenshots: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub include_trailers: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub include_ratings: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub include_tag_count: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub include_reviews: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub include_basic_info: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub include_supported_languages: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub include_full_description: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub include_included_items: ::core::option::Option<bool>,
    #[prost(message, optional, boxed, tag = "14")]
    pub included_item_data_request:
        ::core::option::Option<::prost::alloc::boxed::Box<StoreBrowseItemDataRequest>>,
    #[prost(bool, optional, tag = "15")]
    pub include_assets_without_overrides: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub apply_user_filters: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17")]
    pub include_links: ::core::option::Option<bool>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreGameRating {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub rating: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub interactive_elements: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "10")]
    pub required_age: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11")]
    pub use_age_gate: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "20")]
    pub image_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub image_target: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItem {
    #[prost(int32, optional, tag = "1")]
    pub item_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub success: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub visible: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub unvailable_for_country_restriction: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub store_url_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub appid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "10")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "11")]
    pub included_types: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, packed = "false", tag = "12")]
    pub included_appids: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "13")]
    pub is_free: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub is_early_access: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "15")]
    pub related_items: ::core::option::Option<StoreItemRelatedItems>,
    #[prost(message, optional, tag = "16")]
    pub included_items: ::core::option::Option<StoreItemIncludedItems>,
    #[prost(int32, repeated, packed = "false", tag = "20")]
    pub content_descriptorids: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, packed = "false", tag = "21")]
    pub tagids: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "22")]
    pub categories: ::core::option::Option<StoreItemCategories>,
    #[prost(message, optional, tag = "23")]
    pub reviews: ::core::option::Option<StoreItemReviews>,
    #[prost(message, optional, tag = "24")]
    pub basic_info: ::core::option::Option<StoreItemBasicInfo>,
    #[prost(message, repeated, tag = "25")]
    pub tags: ::prost::alloc::vec::Vec<StoreItemTag>,
    #[prost(message, optional, tag = "30")]
    pub assets: ::core::option::Option<StoreItemAssets>,
    #[prost(message, optional, tag = "31")]
    pub release: ::core::option::Option<StoreItemReleaseInfo>,
    #[prost(message, optional, tag = "32")]
    pub platforms: ::core::option::Option<StoreItemPlatforms>,
    #[prost(message, optional, tag = "33")]
    pub game_rating: ::core::option::Option<StoreGameRating>,
    #[prost(bool, optional, tag = "34")]
    pub is_coming_soon: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "40")]
    pub best_purchase_option: ::core::option::Option<StoreItemPurchaseOption>,
    #[prost(message, repeated, tag = "41")]
    pub purchase_options: ::prost::alloc::vec::Vec<StoreItemPurchaseOption>,
    #[prost(message, repeated, tag = "42")]
    pub accessories: ::prost::alloc::vec::Vec<StoreItemPurchaseOption>,
    #[prost(message, optional, tag = "43")]
    pub self_purchase_option: ::core::option::Option<StoreItemPurchaseOption>,
    #[prost(message, optional, tag = "50")]
    pub screenshots: ::core::option::Option<StoreItemScreenshots>,
    #[prost(message, optional, tag = "51")]
    pub trailers: ::core::option::Option<StoreItemTrailers>,
    #[prost(message, repeated, tag = "52")]
    pub supported_languages: ::prost::alloc::vec::Vec<StoreItemSupportedLanguage>,
    #[prost(string, optional, tag = "53")]
    pub store_url_path_override: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "54")]
    pub free_weekend: ::core::option::Option<StoreItemFreeWeekend>,
    #[prost(bool, optional, tag = "55")]
    pub unlisted: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "56")]
    pub game_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "57")]
    pub internal_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "58")]
    pub full_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "59")]
    pub is_free_temporarily: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "60")]
    pub assets_without_overrides: ::core::option::Option<StoreItemAssets>,
    #[prost(message, optional, tag = "70")]
    pub user_filter_failure: ::core::option::Option<StoreBrowseFilterFailure>,
    #[prost(message, repeated, tag = "71")]
    pub links: ::prost::alloc::vec::Vec<StoreItemLink>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemAssets {
    #[prost(string, optional, tag = "1")]
    pub asset_url_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub main_capsule: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub small_capsule: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub header: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub package_header: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub page_background: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub hero_capsule: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub hero_capsule_2x: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub library_capsule: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub library_capsule_2x: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub library_hero: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub library_hero_2x: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub community_icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub clan_avatar: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub page_background_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub raw_page_background: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemBasicInfo {
    #[prost(string, optional, tag = "1")]
    pub short_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub publishers: ::prost::alloc::vec::Vec<StoreItemBasicInfoCreatorHomeLink>,
    /// repeated string publishers = 2;
    #[prost(message, repeated, tag = "3")]
    pub developers: ::prost::alloc::vec::Vec<StoreItemBasicInfoCreatorHomeLink>,
    /// repeated string developers = 3;
    #[prost(message, repeated, tag = "4")]
    pub franchises: ::prost::alloc::vec::Vec<StoreItemBasicInfoCreatorHomeLink>,
    /// repeated string franchises = 4;
    #[prost(string, optional, tag = "5")]
    pub capsule_headline: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemBasicInfoCreatorHomeLink {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub creator_clan_account_id: ::core::option::Option<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemCategories {
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub supported_player_categoryids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub feature_categoryids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "4")]
    pub controller_categoryids: ::prost::alloc::vec::Vec<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemFreeWeekend {
    #[prost(uint32, optional, tag = "1")]
    pub start_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub end_time: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemIncludedItems {
    #[prost(message, repeated, tag = "1")]
    pub included_apps: ::prost::alloc::vec::Vec<StoreItem>,
    #[prost(message, repeated, tag = "2")]
    pub included_packages: ::prost::alloc::vec::Vec<StoreItem>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemLink {
    #[prost(int32, optional, tag = "1")]
    pub link_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreItemPlatforms {
    #[prost(bool, optional, tag = "1")]
    pub windows: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub mac: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub linux: ::core::option::Option<bool>,
    /// optional bool steamos_linux = 3;
    #[prost(message, optional, tag = "10")]
    pub vr_support: ::core::option::Option<StoreItemPlatformsVrSupport>,
    #[prost(int32, optional, tag = "11")]
    pub steam_deck_compat_category: ::core::option::Option<i32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreItemPlatformsVrSupport {
    #[prost(bool, optional, tag = "1")]
    pub vrhmd: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub vrhmd_only: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "40")]
    pub htc_vive: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "41")]
    pub oculus_rift: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "42")]
    pub windows_mr: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "43")]
    pub valve_index: ::core::option::Option<bool>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemPurchaseOption {
    #[prost(int32, optional, tag = "1")]
    pub packageid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub bundleid: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub purchase_option_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "5")]
    pub final_price_in_cents: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "6")]
    pub original_price_in_cents: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "7")]
    pub user_final_price_in_cents: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "8")]
    pub formatted_final_price: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub formatted_original_price: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "10")]
    pub discount_pct: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub user_discount_pct: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub bundle_discount_pct: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "13")]
    pub is_free_to_keep: ::core::option::Option<bool>,
    #[prost(int64, optional, tag = "14")]
    pub price_before_bundle_discount: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "15")]
    pub formatted_price_before_bundle_discount:
        ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "20")]
    pub active_discounts: ::prost::alloc::vec::Vec<StoreItemPurchaseOptionDiscount>,
    #[prost(message, repeated, tag = "21")]
    pub user_active_discounts: ::prost::alloc::vec::Vec<StoreItemPurchaseOptionDiscount>,
    #[prost(message, repeated, tag = "22")]
    pub inactive_discounts: ::prost::alloc::vec::Vec<StoreItemPurchaseOptionDiscount>,
    #[prost(bool, optional, tag = "30")]
    pub user_can_purchase: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "31")]
    pub user_can_purchase_as_gift: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "40")]
    pub is_commercial_license: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "41")]
    pub should_suppress_discount_pct: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "42", default = "false")]
    pub hide_discount_pct_for_compliance: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "43", default = "1")]
    pub included_game_count: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "44")]
    pub lowest_recent_price_in_cents: ::core::option::Option<i64>,
    #[prost(bool, optional, tag = "45")]
    pub requires_shipping: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "46")]
    pub recurrence_info: ::core::option::Option<StoreItemPurchaseOptionRecurrenceInfo>,
    #[prost(uint32, optional, tag = "47")]
    pub free_to_keep_ends: ::core::option::Option<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemPurchaseOptionDiscount {
    #[prost(int64, optional, tag = "1")]
    pub discount_amount: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub discount_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub discount_end_date: ::core::option::Option<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemPurchaseOptionRecurrenceInfo {
    #[prost(int32, optional, tag = "1")]
    pub packageid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub billing_agreement_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub renewal_time_unit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub renewal_time_period: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "5")]
    pub renewal_price_in_cents: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "6")]
    pub formatted_renewal_price: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemRelatedItems {
    #[prost(uint32, optional, tag = "1")]
    pub parent_appid: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub demo_appid: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "3")]
    pub standalone_demo_appid: ::prost::alloc::vec::Vec<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemReleaseInfo {
    #[prost(uint32, optional, tag = "1")]
    pub steam_release_date: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub original_release_date: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub original_steam_release_date: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub is_coming_soon: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub is_preload: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub custom_release_date_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub is_abridged_release_date: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub coming_soon_display: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "10")]
    pub is_early_access: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "20")]
    pub mac_release_date: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "21")]
    pub linux_release_date: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "22")]
    pub limited_launch_active: ::core::option::Option<bool>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemReviews {
    #[prost(message, optional, tag = "1")]
    pub summary_filtered: ::core::option::Option<StoreItemReviewsStoreReviewSummary>,
    #[prost(message, optional, tag = "2")]
    pub summary_unfiltered: ::core::option::Option<StoreItemReviewsStoreReviewSummary>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemReviewsStoreReviewSummary {
    #[prost(uint32, optional, tag = "1")]
    pub review_count: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub percent_positive: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub review_score: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub review_score_label: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemScreenshots {
    #[prost(message, repeated, tag = "2")]
    pub all_ages_screenshots: ::prost::alloc::vec::Vec<StoreItemScreenshotsScreenshot>,
    #[prost(message, repeated, tag = "3")]
    pub mature_content_screenshots: ::prost::alloc::vec::Vec<StoreItemScreenshotsScreenshot>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemScreenshotsScreenshot {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub ordinal: ::core::option::Option<i32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreItemSupportedLanguage {
    #[prost(int32, optional, tag = "1", default = "-1")]
    pub elanguage: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub supported: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub full_audio: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub subtitles: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5", default = "-1")]
    pub eadditionallanguage: ::core::option::Option<i32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreItemTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub weight: ::core::option::Option<u32>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemTrailers {
    #[prost(message, repeated, tag = "1")]
    pub highlights: ::prost::alloc::vec::Vec<StoreItemTrailersTrailer>,
    #[prost(message, repeated, tag = "2")]
    pub other_trailers: ::prost::alloc::vec::Vec<StoreItemTrailersTrailer>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemTrailersTrailer {
    #[prost(string, optional, tag = "1")]
    pub trailer_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub trailer_url_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "3")]
    pub trailer_480p: ::prost::alloc::vec::Vec<StoreItemTrailersVideoSource>,
    #[prost(message, repeated, tag = "4")]
    pub trailer_max: ::prost::alloc::vec::Vec<StoreItemTrailersVideoSource>,
    #[prost(message, repeated, tag = "5")]
    pub microtrailer: ::prost::alloc::vec::Vec<StoreItemTrailersVideoSource>,
    #[prost(string, optional, tag = "10")]
    pub screenshot_medium: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub screenshot_full: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "12")]
    pub trailer_base_id: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub trailer_category: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14")]
    pub all_ages: ::core::option::Option<bool>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, Store, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery, StoreTopSellers, Wishlist
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct StoreItemTrailersVideoSource {
    #[prost(string, optional, tag = "1")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
}
/// Used by: Checkout, MarketingMessages, PartnerStoreBrowse, SteamCharts, StoreAppSimilarity, StoreBrowse, StoreMarketing, StoreQuery
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct StoreItemId {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub bundleid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub creatorid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub hubcategoryid: ::core::option::Option<u32>,
}
/// Used by: Player, PlayerClient, Store, StoreClient
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct UserContentDescriptorPreferences {
    #[prost(message, repeated, tag = "1")]
    pub content_descriptors_to_exclude:
        ::prost::alloc::vec::Vec<UserContentDescriptorPreferencesContentDescriptor>,
}
/// Used by: Player, PlayerClient, Store, StoreClient
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserContentDescriptorPreferencesContentDescriptor {
    #[prost(uint32, optional, tag = "1")]
    pub content_descriptorid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub timestamp_added: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CAchievementsGetInfoRequest {
    #[prost(uint64, optional, tag = "1")]
    pub gameid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAchievementsGetInfoResponse {
    #[prost(message, repeated, tag = "1")]
    pub achievements: ::prost::alloc::vec::Vec<CAchievementsGetInfoResponseInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CAchievementsGetInfoResponseInfo {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub image_url_achieved: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub image_url_not_achieved: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub achieved: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub unlock_time: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetBestOfYearPagesRequest {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetBestOfYearPagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub pages: ::prost::alloc::vec::Vec<CSteamChartsGetBestOfYearPagesResponseBestOfYearPage>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetBestOfYearPagesResponseBestOfYearPage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub url_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub banner_url: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub banner_url_mobile: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub start_date: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetGamesByConcurrentPlayersRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "2")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetGamesByConcurrentPlayersResponse {
    #[prost(uint32, optional, tag = "1")]
    pub last_update: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub ranks:
        ::prost::alloc::vec::Vec<CSteamChartsGetGamesByConcurrentPlayersResponseMostPlayedRank>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetGamesByConcurrentPlayersResponseMostPlayedRank {
    #[prost(int32, optional, tag = "1")]
    pub rank: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<StoreItem>,
    #[prost(uint32, optional, tag = "4")]
    pub concurrent_in_game: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub peak_in_game: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMonthTopAppReleasesRequest {
    #[prost(uint32, optional, tag = "1")]
    pub rtime_month: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub include_dlc: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "3")]
    pub top_results_limit: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMonthTopAppReleasesResponse {
    #[prost(message, repeated, tag = "1")]
    pub top_app_releases:
        ::prost::alloc::vec::Vec<CSteamChartsGetMonthTopAppReleasesResponseAppNewRelease>,
    #[prost(message, repeated, tag = "2")]
    pub top_dlc_releases:
        ::prost::alloc::vec::Vec<CSteamChartsGetMonthTopAppReleasesResponseAppNewRelease>,
    #[prost(message, repeated, tag = "3")]
    pub top_combined_app_and_dlc_releases:
        ::prost::alloc::vec::Vec<CSteamChartsGetMonthTopAppReleasesResponseAppNewRelease>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMonthTopAppReleasesResponseAppNewRelease {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub rtime_release: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub app_release_rank: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedGamesRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "2")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedGamesResponse {
    #[prost(uint32, optional, tag = "1")]
    pub rollup_date: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub ranks: ::prost::alloc::vec::Vec<CSteamChartsGetMostPlayedGamesResponseMostPlayedRank>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedGamesResponseMostPlayedRank {
    #[prost(int32, optional, tag = "1")]
    pub rank: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<StoreItem>,
    #[prost(int32, optional, tag = "4")]
    pub last_week_rank: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "5")]
    pub peak_in_game: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub daily_active_players: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedSteamDeckGamesRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "2")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
    #[prost(int32, optional, tag = "3")]
    pub top_played_period: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedSteamDeckGamesResponse {
    #[prost(message, repeated, tag = "1")]
    pub ranks:
        ::prost::alloc::vec::Vec<CSteamChartsGetMostPlayedSteamDeckGamesResponseMostPlayedRank>,
    #[prost(int32, optional, tag = "2")]
    pub top_played_period: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetMostPlayedSteamDeckGamesResponseMostPlayedRank {
    #[prost(int32, optional, tag = "1")]
    pub rank: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<StoreItem>,
    #[prost(int32, optional, tag = "4")]
    pub last_period_rank: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetTopReleasesPagesRequest {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetTopReleasesPagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub pages: ::prost::alloc::vec::Vec<CSteamChartsGetTopReleasesPagesResponseTopReleasesPage>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CSteamChartsGetTopReleasesPagesResponseTopReleasesPage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub start_of_month: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub url_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "4")]
    pub item_ids: ::prost::alloc::vec::Vec<StoreItemId>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CPackageReservationStatus {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub reservation_state: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub queue_position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub total_queue_size: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub reservation_country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub expired: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub time_expires: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub time_reserved: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub rtime_estimated_notification: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "10")]
    pub notificaton_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CReservationPositionMessage {
    #[prost(uint32, optional, tag = "1")]
    pub edistributor: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub product_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub start_queue_position: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub rtime_estimated_notification: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "5")]
    pub localization_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub rtime_created: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamDeckCompatibilitySetFeedbackRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub feedback: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamDeckCompatibilitySetFeedbackResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamDeckCompatibilityShouldPromptRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CSteamDeckCompatibilityShouldPromptResponse {
    #[prost(bool, optional, tag = "1")]
    pub prompt: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub feedback_eligible: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub existing_feedback: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreDeleteReservationPositionMessageRequest {
    #[prost(uint32, optional, tag = "1")]
    pub edistributor: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub product_identifier: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub start_queue_position: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreDeleteReservationPositionMessageResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetAllReservationPositionMessagesRequest {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetAllReservationPositionMessagesResponse {
    #[prost(message, repeated, tag = "1")]
    pub settings: ::prost::alloc::vec::Vec<CReservationPositionMessage>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueRequest {
    #[prost(int32, optional, tag = "1")]
    pub queue_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub rebuild_queue: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub settings_changed: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "5")]
    pub settings: ::core::option::Option<CStoreDiscoveryQueueSettings>,
    #[prost(bool, optional, tag = "6")]
    pub rebuild_queue_if_stale: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub ignore_user_preferences: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub no_experimental_results: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "10")]
    pub experimental_cohort: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "11")]
    pub debug_get_solr_query: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "12")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
    #[prost(message, optional, tag = "13")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "14")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueResponse {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "2")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub settings: ::core::option::Option<CStoreDiscoveryQueueSettings>,
    #[prost(int32, optional, tag = "4")]
    pub skipped: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub exhausted: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub experimental_cohort: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub debug_solr_query: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "8")]
    pub store_items: ::prost::alloc::vec::Vec<StoreItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueSettingsRequest {
    #[prost(int32, optional, tag = "1")]
    pub queue_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueSettingsResponse {
    #[prost(string, optional, tag = "1")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub settings: ::core::option::Option<CStoreDiscoveryQueueSettings>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueSkippedAppsRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub queue_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetDiscoveryQueueSkippedAppsResponse {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetLocalizedNameForTagsRequest {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub tagids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetLocalizedNameForTagsResponse {
    #[prost(message, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<CStoreGetLocalizedNameForTagsResponseTag>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetLocalizedNameForTagsResponseTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub english_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub normalized_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetMostPopularTagsRequest {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetMostPopularTagsResponse {
    #[prost(message, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<CStoreGetMostPopularTagsResponseTag>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetMostPopularTagsResponseTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetRecommendedTagsForUserRequest {
    #[prost(string, optional, tag = "2")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub favor_rarer_tags: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetRecommendedTagsForUserResponse {
    #[prost(message, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<CStoreGetRecommendedTagsForUserResponseTag>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetRecommendedTagsForUserResponseTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "3")]
    pub weight: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetStorePreferencesRequest {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetStorePreferencesResponse {
    #[prost(message, optional, tag = "1")]
    pub preferences: ::core::option::Option<CStoreUserPreferences>,
    #[prost(message, optional, tag = "2")]
    pub tag_preferences: ::core::option::Option<CStoreUserTagPreferences>,
    /// optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
    #[prost(message, optional, tag = "3")]
    pub content_descriptor_preferences:
        ::core::option::Option<CStoreUserContentDescriptorPreferences>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetTagListRequest {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub have_version_hash: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetTagListResponse {
    #[prost(string, optional, tag = "1")]
    pub version_hash: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub tags: ::prost::alloc::vec::Vec<CStoreGetTagListResponseTag>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetTagListResponseTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetTrendingAppsAmongFriendsRequest {
    #[prost(uint32, optional, tag = "1")]
    pub num_apps: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub num_top_friends: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetTrendingAppsAmongFriendsResponse {
    #[prost(message, repeated, tag = "1")]
    pub trending_apps:
        ::prost::alloc::vec::Vec<CStoreGetTrendingAppsAmongFriendsResponseTrendingAppData>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetTrendingAppsAmongFriendsResponseTrendingAppData {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint64, repeated, packed = "false", tag = "2")]
    pub steamids_top_friends: ::prost::alloc::vec::Vec<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub total_friends: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetUserGameInterestStateRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub store_appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub beta_appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreGetUserGameInterestStateResponse {
    #[prost(bool, optional, tag = "1")]
    pub owned: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub wishlist: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub ignored: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub following: ::core::option::Option<bool>,
    #[prost(int32, repeated, packed = "false", tag = "5")]
    pub in_queues: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "6")]
    pub queues_with_skip: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "7")]
    pub queue_items_remaining: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, packed = "false", tag = "8")]
    pub queue_items_next_appid: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "9")]
    pub temporarily_owned: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "10")]
    pub queues: ::prost::alloc::vec::Vec<CStoreGetUserGameInterestStateResponseInQueue>,
    #[prost(int32, optional, tag = "11")]
    pub ignored_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub beta_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetUserGameInterestStateResponseInQueue {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub skipped: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub items_remaining: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "4")]
    pub next_appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub experimental_cohort: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetWishlistDemoEmailStatusRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub demo_appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub allow_late_firing: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreGetWishlistDemoEmailStatusResponse {
    #[prost(bool, optional, tag = "1", default = "false")]
    pub can_fire: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "2")]
    pub time_staged: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub demo_release_date: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreMigratePartnerLinkTrackingNotification {
    #[prost(uint32, optional, tag = "1")]
    pub accountid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub browserid: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub backfill_source: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePurchaseReceiptInfo {
    #[prost(uint64, optional, tag = "1")]
    pub transactionid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub purchase_status: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub result_detail: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub transaction_time: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub payment_method: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "7")]
    pub base_price: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub total_discount: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub tax: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub shipping: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "11")]
    pub currency_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "12")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub error_headline: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub error_string: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub error_link_text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub error_link_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "17")]
    pub error_appid: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "18")]
    pub line_items: ::prost::alloc::vec::Vec<CStorePurchaseReceiptInfoLineItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStorePurchaseReceiptInfoLineItem {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub line_item_description: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueueWishlistDemoEmailToFireRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub demo_appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub allow_late_firing: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueueWishlistDemoEmailToFireResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreRegisterCdKeyRequest {
    #[prost(string, optional, tag = "1")]
    pub activation_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub purchase_platform: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_request_from_client: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreRegisterCdKeyResponse {
    #[prost(int32, optional, tag = "1")]
    pub purchase_result_details: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub purchase_receipt_info: ::core::option::Option<CStorePurchaseReceiptInfo>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreReloadAllReservationPositionMessagesNotification {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreReportAppRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub report_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub report: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreReportAppResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreSetReservationPositionMessageRequest {
    #[prost(message, repeated, tag = "1")]
    pub settings: ::prost::alloc::vec::Vec<CReservationPositionMessage>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreSetReservationPositionMessageResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreSkipDiscoveryQueueItemRequest {
    #[prost(int32, optional, tag = "1")]
    pub queue_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "3")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreSkipDiscoveryQueueItemResponse {}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreStorePreferencesChangedNotification {
    #[prost(message, optional, tag = "1")]
    pub preferences: ::core::option::Option<CStoreUserPreferences>,
    #[prost(message, optional, tag = "2")]
    pub tag_preferences: ::core::option::Option<CStoreUserTagPreferences>,
    /// optional .UserContentDescriptorPreferences content_descriptor_preferences = 3;
    #[prost(message, optional, tag = "3")]
    pub content_descriptor_preferences:
        ::core::option::Option<CStoreUserContentDescriptorPreferences>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUpdatePackageReservationsRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub packages_to_reserve: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub packages_to_unreserve: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "3")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUpdatePackageReservationsResponse {
    #[prost(message, repeated, tag = "1")]
    pub reservation_status: ::prost::alloc::vec::Vec<CPackageReservationStatus>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUserContentDescriptorPreferences {
    #[prost(message, repeated, tag = "1")]
    pub content_descriptors_to_exclude:
        ::prost::alloc::vec::Vec<CStoreUserContentDescriptorPreferencesContentDescriptor>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreUserContentDescriptorPreferencesContentDescriptor {
    #[prost(uint32, optional, tag = "1")]
    pub content_descriptorid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub timestamp_added: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUserPreferences {
    #[prost(int32, optional, tag = "1")]
    pub primary_language: ::core::option::Option<i32>,
    /// optional uint32 primary_language = 1;
    #[prost(uint32, optional, tag = "2")]
    pub secondary_languages: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub platform_windows: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub platform_mac: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub platform_linux: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub hide_adult_content_violence: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub hide_adult_content_sex: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "8")]
    pub timestamp_updated: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "9")]
    pub hide_store_broadcast: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub review_score_preference: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub timestamp_content_descriptor_preferences_updated: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "12")]
    pub provide_deck_feedback: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "13")]
    pub additional_languages: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUserTagPreferences {
    #[prost(message, repeated, tag = "1")]
    pub tags_to_exclude: ::prost::alloc::vec::Vec<CStoreUserTagPreferencesTag>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreUserTagPreferencesTag {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub timestamp_added: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreDiscoveryQueueSettings {
    #[prost(bool, optional, tag = "4")]
    pub os_win: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub os_mac: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub os_linux: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub full_controller_support: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub native_steam_controller: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub include_coming_soon: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "10")]
    pub excluded_tagids: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, optional, tag = "11")]
    pub exclude_early_access: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub exclude_videos: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub exclude_software: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub exclude_dlc: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub exclude_soundtracks: ::core::option::Option<bool>,
    #[prost(uint32, repeated, packed = "false", tag = "16")]
    pub featured_tagids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CHardwarePackageDetails {
    #[prost(uint32, optional, tag = "1")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub inventory_available: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub high_pending_orders: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub account_restricted_from_purchasing: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub requires_reservation: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub rtime_estimated_notification: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub notificaton_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub reservation_state: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub expired: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "11")]
    pub time_expires: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub time_reserved: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "13")]
    pub allow_quantity_purchase: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "14")]
    pub max_quantity_per_purchase: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "15")]
    pub allow_purchase_in_country: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "17")]
    pub estimated_delivery_soonest_business_days: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub estimated_delivery_latest_business_days: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetContentHubConfigRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetContentHubConfigResponse {
    #[prost(message, repeated, tag = "1")]
    pub hubconfigs:
        ::prost::alloc::vec::Vec<CStoreBrowseGetContentHubConfigResponseContentHubConfig>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetContentHubConfigResponseContentHubConfig {
    #[prost(uint32, optional, tag = "1")]
    pub hubcategoryid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub handle: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub url_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "2")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
    #[prost(message, repeated, tag = "3")]
    pub appids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(uint64, optional, tag = "4")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsResponse {
    #[prost(message, repeated, tag = "1")]
    pub dlc_data: ::prost::alloc::vec::Vec<CStoreBrowseGetDlcForAppsResponseDlcData>,
    #[prost(message, repeated, tag = "2")]
    pub playtime: ::prost::alloc::vec::Vec<CStoreBrowseGetDlcForAppsResponsePlaytimeForApp>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsResponseDlcData {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub parentappid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub release_date: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub coming_soon: ::core::option::Option<bool>,
    #[prost(int64, optional, tag = "5")]
    pub price: ::core::option::Option<i64>,
    #[prost(uint32, optional, tag = "6")]
    pub discount: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "7")]
    pub free: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsResponsePlaytimeForApp {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub playtime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub last_played: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsSolrRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, optional, tag = "3")]
    pub flavor: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub count: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "5")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsSolrResponse {
    #[prost(message, repeated, tag = "1")]
    pub dlc_lists: ::prost::alloc::vec::Vec<CStoreBrowseGetDlcForAppsSolrResponseDlcList>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetDlcForAppsSolrResponseDlcList {
    #[prost(uint32, optional, tag = "1")]
    pub parent_appid: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "2")]
    pub dlc_appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetHardwareItemsRequest {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub packageid: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<StoreBrowseContext>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetHardwareItemsResponse {
    #[prost(message, repeated, tag = "1")]
    pub details: ::prost::alloc::vec::Vec<CHardwarePackageDetails>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetPriceStopsRequest {
    #[prost(string, optional, tag = "1")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub currency_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetPriceStopsResponse {
    #[prost(message, repeated, tag = "1")]
    pub price_stops: ::prost::alloc::vec::Vec<CStoreBrowseGetPriceStopsResponsePriceStop>,
    #[prost(string, optional, tag = "2")]
    pub currency_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetPriceStopsResponsePriceStop {
    #[prost(string, optional, tag = "1")]
    pub formatted_amount: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "2")]
    pub amount_in_cents: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetStoreCategoriesRequest {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2", default = "-1")]
    pub elanguage: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetStoreCategoriesResponse {
    #[prost(message, repeated, tag = "1")]
    pub categories: ::prost::alloc::vec::Vec<CStoreBrowseGetStoreCategoriesResponseCategory>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreBrowseGetStoreCategoriesResponseCategory {
    #[prost(uint32, optional, tag = "1")]
    pub categoryid: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub internal_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub image_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub show_in_search: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub computed: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub edit_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub edit_sort_order: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemByUserCombinedTagsPriorityRequest {
    #[prost(int32, optional, tag = "1", default = "0")]
    pub sort: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub max_items: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub randomize: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4", default = "false")]
    pub include_packages: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5", default = "false")]
    pub include_bundles: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "6")]
    pub filters: ::core::option::Option<CStorePageFilter>,
    #[prost(message, optional, tag = "7")]
    pub context: ::core::option::Option<StoreBrowseContext>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemByUserCombinedTagsPriorityResponse {
    #[prost(uint32, repeated, packed = "false", tag = "1")]
    pub tagid: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub store_item_ids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(string, repeated, tag = "3")]
    pub tag_name: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemsByUserRecommendedTagsRequest {
    #[prost(message, optional, tag = "2")]
    pub filters: ::core::option::Option<CStorePageFilter>,
    #[prost(message, optional, tag = "5")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, repeated, tag = "6")]
    pub sections: ::prost::alloc::vec::Vec<CStoreQueryGetItemsByUserRecommendedTagsRequestSection>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemsByUserRecommendedTagsRequestSection {
    #[prost(int32, optional, tag = "1", default = "0")]
    pub sort: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub min_items: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub randomize: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4", default = "false")]
    pub include_packages: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5", default = "false")]
    pub include_bundles: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemsByUserRecommendedTagsResponse {
    #[prost(message, repeated, tag = "1")]
    pub sections: ::prost::alloc::vec::Vec<CStoreQueryGetItemsByUserRecommendedTagsResponseSection>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryGetItemsByUserRecommendedTagsResponseSection {
    #[prost(uint32, optional, tag = "1")]
    pub tagid: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub store_item_ids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(string, optional, tag = "3")]
    pub tag_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryQueryRequest {
    #[prost(string, optional, tag = "1")]
    pub query_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<CStoreQueryParams>,
    #[prost(message, optional, tag = "3")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "4")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
    #[prost(string, optional, tag = "5")]
    pub override_country_code: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryQueryResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<CStoreQueryResultMetadata>,
    #[prost(message, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(message, repeated, tag = "3")]
    pub store_items: ::prost::alloc::vec::Vec<StoreItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQuerySearchSuggestionsRequest {
    #[prost(string, optional, tag = "1")]
    pub query_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(string, optional, tag = "3")]
    pub search_term: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub max_results: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "5")]
    pub filters: ::core::option::Option<CStoreQueryFilters>,
    #[prost(message, optional, tag = "6")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
    #[prost(bool, optional, tag = "7")]
    pub use_spellcheck: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub search_tags: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub search_creators: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub prefilter_creators: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQuerySearchSuggestionsResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<CStoreQueryResultMetadata>,
    #[prost(message, repeated, tag = "2")]
    pub ids: ::prost::alloc::vec::Vec<StoreItemId>,
    #[prost(message, repeated, tag = "3")]
    pub store_items: ::prost::alloc::vec::Vec<StoreItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryFilters {
    #[prost(bool, optional, tag = "1")]
    pub released_only: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub coming_soon_only: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "3")]
    pub type_filters: ::core::option::Option<CStoreQueryFiltersTypeFilters>,
    #[prost(int32, repeated, packed = "false", tag = "4")]
    pub exclude_from: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "5")]
    pub predefined_filter: ::core::option::Option<CStoreQueryFiltersPredefinedFilter>,
    #[prost(message, repeated, tag = "10")]
    pub tagids_must_match: ::prost::alloc::vec::Vec<CStoreQueryFiltersTagFilter>,
    #[prost(int32, repeated, packed = "false", tag = "11")]
    pub tagids_exclude: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "12")]
    pub price_filters: ::core::option::Option<CStoreQueryFiltersPriceFilters>,
    #[prost(int32, repeated, packed = "false", tag = "15")]
    pub content_descriptors_must_match: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, repeated, packed = "false", tag = "16")]
    pub content_descriptors_excluded: ::prost::alloc::vec::Vec<i32>,
    #[prost(int32, optional, tag = "40")]
    pub regional_top_n_sellers: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "41")]
    pub global_top_n_sellers: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "42")]
    pub regional_long_term_top_n_sellers: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "43")]
    pub global_long_term_top_n_sellers: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "44")]
    pub store_page_filter: ::core::option::Option<CStorePageFilter>,
    #[prost(uint32, repeated, packed = "false", tag = "45")]
    pub parent_appids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryFiltersPredefinedFilter {
    #[prost(int32, optional, tag = "1")]
    pub filter_type: ::core::option::Option<i32>,
    #[prost(int32, repeated, packed = "false", tag = "2")]
    pub language_preferences: ::prost::alloc::vec::Vec<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueryFiltersPriceFilters {
    #[prost(bool, optional, tag = "1")]
    pub only_free_items: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub exclude_free_items: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub min_discount_percent: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryFiltersTagFilter {
    #[prost(int32, repeated, packed = "false", tag = "1")]
    pub tagids: ::prost::alloc::vec::Vec<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueryFiltersTypeFilters {
    #[prost(bool, optional, tag = "1")]
    pub include_apps: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub include_packages: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub include_bundles: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub include_games: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub include_demos: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub include_mods: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub include_dlc: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub include_software: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "15")]
    pub include_video: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub include_hardware: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "17")]
    pub include_series: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "18")]
    pub include_music: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryParams {
    #[prost(int32, optional, tag = "1", default = "0")]
    pub start: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2", default = "10")]
    pub count: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10", default = "0")]
    pub sort: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "20")]
    pub filters: ::core::option::Option<CStoreQueryFilters>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CStoreQueryPerResultMetadata {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<StoreItemId>,
    #[prost(double, optional, tag = "2")]
    pub score: ::core::option::Option<f64>,
    #[prost(bool, optional, tag = "3")]
    pub spellcheck_generated_result: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreQueryResultMetadata {
    #[prost(int32, optional, tag = "1")]
    pub total_matching_records: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub start: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub count: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "4")]
    pub per_result_metadata: ::prost::alloc::vec::Vec<CStoreQueryPerResultMetadata>,
    #[prost(string, repeated, tag = "5")]
    pub spellcheck_suggestions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetCountryListRequest {
    #[prost(string, optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetCountryListResponse {
    #[prost(message, repeated, tag = "1")]
    pub countries: ::prost::alloc::vec::Vec<CStoreTopSellersGetCountryListResponseCountry>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetCountryListResponseCountry {
    #[prost(string, optional, tag = "1")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetWeeklyTopSellersRequest {
    #[prost(string, optional, tag = "1")]
    pub country_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "3")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
    #[prost(uint32, optional, tag = "4")]
    pub start_date: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "5")]
    pub page_start: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6", default = "20")]
    pub page_count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetWeeklyTopSellersResponse {
    #[prost(uint32, optional, tag = "1")]
    pub start_date: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub ranks: ::prost::alloc::vec::Vec<CStoreTopSellersGetWeeklyTopSellersResponseTopSellersRank>,
    #[prost(int32, optional, tag = "3")]
    pub next_page_start: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CStoreTopSellersGetWeeklyTopSellersResponseTopSellersRank {
    #[prost(int32, optional, tag = "1")]
    pub rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub appid: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<StoreItem>,
    #[prost(int32, optional, tag = "4")]
    pub last_week_rank: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub consecutive_weeks: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub first_top100: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsEvent {
    #[prost(uint32, optional, tag = "1")]
    pub eventtype: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub eventtime: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "3")]
    pub steamid_actor: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "4")]
    pub steamid_target: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "5")]
    pub gameid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "6")]
    pub packageid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub shortcutid: ::core::option::Option<u32>,
    #[prost(string, repeated, tag = "8")]
    pub achievement_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(fixed64, optional, tag = "9")]
    pub clan_eventid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "10")]
    pub clan_announcementid: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "11")]
    pub publishedfileid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "12")]
    pub event_last_mod_time: ::core::option::Option<u32>,
    #[prost(uint32, repeated, packed = "false", tag = "13")]
    pub appids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub event_post_time: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CUserNewsGetAppDetailsSpotlightRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "2")]
    pub include_already_seen: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsGetAppDetailsSpotlightResponse {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<CUserNewsGetAppDetailsSpotlightResponseFeaturedEvent>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CUserNewsGetAppDetailsSpotlightResponseFeaturedEvent {
    #[prost(uint32, optional, tag = "1")]
    pub event_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub event_time: ::core::option::Option<u32>,
    #[prost(fixed64, optional, tag = "3")]
    pub clan_id: ::core::option::Option<u64>,
    #[prost(fixed64, optional, tag = "4")]
    pub clan_announcementid: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "5")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub rtime32_last_modified: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsGetUserNewsRequest {
    #[prost(uint32, optional, tag = "1")]
    pub count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub starttime: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub endtime: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub filterflags: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub filterappid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsGetUserNewsResponse {
    #[prost(message, repeated, tag = "1")]
    pub news: ::prost::alloc::vec::Vec<CUserNewsEvent>,
    #[prost(message, repeated, tag = "2")]
    pub achievement_display_data: ::prost::alloc::vec::Vec<CUserNewsAchievementDisplayData>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsAchievementDisplayData {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub achievements: ::prost::alloc::vec::Vec<CUserNewsAchievementDisplayDataCAchievement>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CUserNewsAchievementDisplayDataCAchievement {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub display_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub icon: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "5")]
    pub unlocked_pct: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "6")]
    pub hidden: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistAddToWishlistRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "2")]
    pub navdata: ::core::option::Option<CUserInterfaceNavData>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistAddToWishlistResponse {
    #[prost(uint32, optional, tag = "1")]
    pub wishlist_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<CWishlistGetWishlistResponseWishlistItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistResponseWishlistItem {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub priority: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub date_added: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistItemCountRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistItemCountResponse {
    #[prost(uint32, optional, tag = "1")]
    pub count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistItemsOnSaleRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "2")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistItemsOnSaleResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<CWishlistGetWishlistItemsOnSaleResponseWishlistItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistItemsOnSaleResponseWishlistItem {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "2")]
    pub store_item: ::core::option::Option<StoreItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistSortedFilteredRequest {
    #[prost(fixed64, optional, tag = "1")]
    pub steamid: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<StoreBrowseContext>,
    #[prost(message, optional, tag = "3")]
    pub data_request: ::core::option::Option<StoreBrowseItemDataRequest>,
    #[prost(int32, optional, tag = "4", default = "0")]
    pub sort_order: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "5")]
    pub filters: ::core::option::Option<CWishlistFilters>,
    #[prost(int32, optional, tag = "6", default = "0")]
    pub start_index: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7", default = "100")]
    pub page_size: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistSortedFilteredResponse {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<CWishlistGetWishlistSortedFilteredResponseWishlistItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistGetWishlistSortedFilteredResponseWishlistItem {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub priority: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub date_added: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub store_item: ::core::option::Option<StoreItem>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistRemoveFromWishlistRequest {
    #[prost(uint32, optional, tag = "1")]
    pub appid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistRemoveFromWishlistResponse {
    #[prost(uint32, optional, tag = "1")]
    pub wishlist_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, PartialEq, ::prost::Message)]
pub struct CWishlistFilters {
    #[prost(bool, optional, tag = "1")]
    pub macos_only: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub steamos_linux_only: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub only_games: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub only_software: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub only_dlc: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub only_free: ::core::option::Option<bool>,
    #[prost(int64, optional, tag = "20")]
    pub max_price_in_cents: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "21")]
    pub min_discount_percent: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "22")]
    pub exclude_types: ::core::option::Option<CWishlistFiltersExcludeTypeFilters>,
    #[prost(message, optional, tag = "23")]
    pub steam_deck_filters: ::core::option::Option<CWishlistFiltersSteamDeckFilters>,
    #[prost(int32, repeated, packed = "false", tag = "24")]
    pub tagids_must_match: ::prost::alloc::vec::Vec<i32>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistFiltersExcludeTypeFilters {
    #[prost(bool, optional, tag = "1")]
    pub exclude_early_access: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub exclude_coming_soon: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub exclude_vr_only: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, ::prost::Message)]
pub struct CWishlistFiltersSteamDeckFilters {
    #[prost(bool, optional, tag = "1")]
    pub include_verified: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub include_playable: ::core::option::Option<bool>,
}
